
(:patch
 (:name "009b-polyphonic-rhythm-rules")
 (:doc "")
 (:info
  (:created "2021/07/12 22:59:42")
  (:modified "2021/07/12 23:00:30")
  (:by "om-sharp")
  (:version 1.03))
 (:window (:size (1154 524)) (:position (105 138)))
 (:grid nil)
 (:lock nil)
 (:boxes
  (:box
   (:library "Cluster-Engine")
   (:type :function)
   (:reference (:symbol "RULES-TO-CLUSTER" "CLUSTER-ENGINE"))
   (:group-id nil)
   (:name "rules-to-cluster")
   (:x 4553/7)
   (:y 3644/21)
   (:w 124)
   (:h 29)
   (:color nil)
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align nil)
   (:icon :left)
   (:lock nil)
   (:lambda nil)
   (:inputs
    (:input
     (:type :optional)
     (:name "rules?")
     (:value nil)
     (:reactive nil)))
   (:outputs (:output (:name "out") (:reactive nil)))
   (:id 0))
  (:box
   (:library "Cluster-Engine")
   (:type :function)
   (:reference (:symbol "CLUSTER-ENGINE" "CLUSTER-ENGINE"))
   (:group-id nil)
   (:name "cluster-engine")
   (:x 4938/7)
   (:y 5618/21)
   (:w 120)
   (:h 29)
   (:color nil)
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align nil)
   (:icon :left)
   (:lock nil)
   (:lambda nil)
   (:inputs
    (:input
     (:type :standard)
     (:name "NO-OF-VARIABLES")
     (:value 10)
     (:reactive nil))
    (:input
     (:type :standard)
     (:name "RND?")
     (:value t)
     (:reactive nil))
    (:input
     (:type :standard)
     (:name "DEBUG?")
     (:value nil)
     (:reactive nil))
    (:input
     (:type :standard)
     (:name "RULES")
     (:value nil)
     (:reactive nil))
    (:input
     (:type :standard)
     (:name "TEMPO")
     (:value 90)
     (:reactive nil))
    (:input
     (:type :standard)
     (:name "OUTPUT")
     (:value :voices)
     (:reactive nil))
    (:input
     (:type :standard)
     (:name "METRIC-DOMAIN")
     (:value (:list (:list 4 4)))
     (:reactive nil))
    (:input
     (:type :standard)
     (:name "RHYTHMDOMAIN0")
     (:value (:list (:list 1/4)))
     (:reactive nil))
    (:input
     (:type :standard)
     (:name "PITCHDOMAIN0")
     (:value (:list (:list 7200)))
     (:reactive nil))
    (:input
     (:type :optional)
     (:name "rhythmdomain1")
     (:value nil)
     (:reactive nil))
    (:input
     (:type :optional)
     (:name "pitchdomain1")
     (:value (:list (:list 6700)))
     (:reactive nil)))
   (:outputs (:output (:name "out") (:reactive nil)))
   (:id 1))
  (:box
   (:type :value)
   (:reference cons)
   (:group-id nil)
   (:name "aux 2")
   (:x 5358/7)
   (:y 4379/21)
   (:w 202)
   (:h 30)
   (:color
    (:color-or-nil (:color (:color 1.0 1.0 1.0 1.0)) (:t-or-nil t)))
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align nil)
   (:lock nil)
   (:inputs)
   (:outputs (:output (:name "value") (:reactive nil)))
   (:value
    (:list
     (:list 1/2)
     (:list 1/4)
     (:list 1/8)
     (:list 1/16)
     (:list -1/4)))
   (:id 2))
  (:box
   (:type :abstraction)
   (:reference
    (:patch
     (:name "patch")
     (:doc "")
     (:info
      (:created nil)
      (:modified nil)
      (:by *app-name*)
      (:version 0))
     (:window (:size (579 528)) (:position (126 161)))
     (:grid nil)
     (:lock nil)
     (:boxes
      (:box
       (:type :value)
       (:reference symbol)
       (:group-id nil)
       (:name "aux 2")
       (:x 399)
       (:y 303)
       (:w 32)
       (:h 30)
       (:color
        (:color-or-nil
         (:color (:color 1.0 1.0 1.0 1.0))
         (:t-or-nil t)))
       (:border nil)
       (:roundness nil)
       (:text-font nil)
       (:align nil)
       (:lock nil)
       (:inputs)
       (:outputs (:output (:name "value") (:reactive nil)))
       (:value t)
       (:id 0))
      (:box
       (:type :special)
       (:reference if)
       (:group-id nil)
       (:name "if")
       (:x 76)
       (:y 346)
       (:w 445)
       (:h 29)
       (:color nil)
       (:border nil)
       (:roundness nil)
       (:text-font nil)
       (:align nil)
       (:icon :left)
       (:lock nil)
       (:lambda nil)
       (:inputs
        (:input
         (:type :standard)
         (:name "TEST")
         (:value nil)
         (:reactive nil))
        (:input
         (:type :standard)
         (:name "THEN")
         (:value nil)
         (:reactive nil))
        (:input
         (:type :optional)
         (:name "else")
         (:value nil)
         (:reactive nil)))
       (:outputs (:output (:name "out") (:reactive nil)))
       (:id 1))
      (:box
       (:type :function)
       (:reference not)
       (:group-id nil)
       (:name "not")
       (:x 287)
       (:y 271)
       (:w 56)
       (:h 29)
       (:color nil)
       (:border nil)
       (:roundness nil)
       (:text-font nil)
       (:align nil)
       (:icon :left)
       (:lock nil)
       (:lambda nil)
       (:inputs
        (:input
         (:type :standard)
         (:name "X")
         (:value nil)
         (:reactive nil)))
       (:outputs (:output (:name "out") (:reactive nil)))
       (:id 2))
      (:box
       (:type :special)
       (:reference and)
       (:group-id nil)
       (:name "and")
       (:x 292)
       (:y 224)
       (:w 58)
       (:h 29)
       (:color nil)
       (:border nil)
       (:roundness nil)
       (:text-font nil)
       (:align nil)
       (:icon :left)
       (:lock nil)
       (:lambda nil)
       (:inputs
        (:input
         (:type :optional)
         (:name "test-forms")
         (:value nil)
         (:reactive nil))
        (:input
         (:type :optional)
         (:name "test-forms")
         (:value nil)
         (:reactive nil)))
       (:outputs (:output (:name "out") (:reactive nil)))
       (:id 3))
      (:box
       (:type :value)
       (:reference fixnum)
       (:group-id nil)
       (:name "aux")
       (:x 151)
       (:y 121)
       (:w 32)
       (:h 30)
       (:color
        (:color-or-nil
         (:color (:color 1.0 1.0 1.0 1.0))
         (:t-or-nil t)))
       (:border nil)
       (:roundness nil)
       (:text-font nil)
       (:align nil)
       (:lock nil)
       (:inputs)
       (:outputs (:output (:name "value") (:reactive nil)))
       (:value 0)
       (:id 4))
      (:box
       (:type :function)
       (:reference om=)
       (:group-id nil)
       (:name "om=")
       (:x 103)
       (:y 160)
       (:w 64)
       (:h 29)
       (:color nil)
       (:border nil)
       (:roundness nil)
       (:text-font nil)
       (:align nil)
       (:icon :left)
       (:lock nil)
       (:lambda nil)
       (:inputs
        (:input
         (:type :standard)
         (:name "NUM1")
         (:value 0)
         (:reactive nil))
        (:input
         (:type :standard)
         (:name "NUM2")
         (:value 0)
         (:reactive nil)))
       (:outputs (:output (:name "out") (:reactive nil)))
       (:id 5))
      (:box
       (:type :function)
       (:reference plusp)
       (:group-id nil)
       (:name "plusp")
       (:x 335)
       (:y 153)
       (:w 67)
       (:h 29)
       (:color nil)
       (:border nil)
       (:roundness nil)
       (:text-font nil)
       (:align nil)
       (:icon :left)
       (:lock nil)
       (:lambda nil)
       (:inputs
        (:input
         (:type :standard)
         (:name "X")
         (:value nil)
         (:reactive nil)))
       (:outputs (:output (:name "out") (:reactive nil)))
       (:id 6))
      (:box
       (:type :function)
       (:reference plusp)
       (:group-id nil)
       (:name "plusp")
       (:x 238)
       (:y 152)
       (:w 67)
       (:h 29)
       (:color nil)
       (:border nil)
       (:roundness nil)
       (:text-font nil)
       (:align nil)
       (:icon :left)
       (:lock nil)
       (:lambda nil)
       (:inputs
        (:input
         (:type :standard)
         (:name "X")
         (:value nil)
         (:reactive nil)))
       (:outputs (:output (:name "out") (:reactive nil)))
       (:id 7))
      (:box
       (:type :function)
       (:reference second)
       (:group-id nil)
       (:name "second")
       (:x 94)
       (:y 73)
       (:w 76)
       (:h 29)
       (:color nil)
       (:border nil)
       (:roundness nil)
       (:text-font nil)
       (:align nil)
       (:icon :left)
       (:lock nil)
       (:lambda nil)
       (:inputs
        (:input
         (:type :standard)
         (:name "LIST")
         (:value nil)
         (:reactive nil)))
       (:outputs (:output (:name "out") (:reactive nil)))
       (:id 8))
      (:box
       (:type :function)
       (:reference third)
       (:group-id nil)
       (:name "third")
       (:x 338)
       (:y 72)
       (:w 64)
       (:h 29)
       (:color nil)
       (:border nil)
       (:roundness nil)
       (:text-font nil)
       (:align nil)
       (:icon :left)
       (:lock nil)
       (:lambda nil)
       (:inputs
        (:input
         (:type :standard)
         (:name "LIST")
         (:value nil)
         (:reactive nil)))
       (:outputs (:output (:name "out") (:reactive nil)))
       (:id 9))
      (:box
       (:type :function)
       (:reference first)
       (:group-id nil)
       (:name "first")
       (:x 243)
       (:y 72)
       (:w 59)
       (:h 29)
       (:color nil)
       (:border nil)
       (:roundness nil)
       (:text-font nil)
       (:align nil)
       (:icon :left)
       (:lock nil)
       (:lambda nil)
       (:inputs
        (:input
         (:type :standard)
         (:name "LIST")
         (:value nil)
         (:reactive nil)))
       (:outputs (:output (:name "out") (:reactive nil)))
       (:id 10))
      (:box
       (:type :io)
       (:reference
        (:out (:type omout) (:name "output") (:index 1) (:doc nil)))
       (:group-id nil)
       (:name "output")
       (:x 274)
       (:y 431)
       (:w 58)
       (:h 42)
       (:color
        (:color-or-nil
         (:color (:color 1.0 1.0 1.0 0.0))
         (:t-or-nil t)))
       (:border 0)
       (:roundness 0)
       (:text-font nil)
       (:align :center)
       (:icon :top)
       (:inputs
        (:input
         (:type :standard)
         (:name "out-value")
         (:value nil)
         (:reactive nil)))
       (:outputs)
       (:id 11))
      (:box
       (:type :io)
       (:reference
        (:in (:type omin) (:index 1) (:name "input") (:doc "")))
       (:group-id nil)
       (:name "input")
       (:x 282)
       (:y 0)
       (:w 50)
       (:h 42)
       (:color
        (:color-or-nil
         (:color (:color 1.0 1.0 1.0 0.0))
         (:t-or-nil t)))
       (:border 0)
       (:roundness 0)
       (:text-font nil)
       (:align :center)
       (:icon :top)
       (:inputs)
       (:outputs (:output (:name "out") (:reactive nil)))
       (:id 12)))
     (:connections
      (:connection (:from (:box 0 :out 0)) (:to (:box 1 :in 2)))
      (:connection (:from (:box 1 :out 0)) (:to (:box 11 :in 0)))
      (:connection (:from (:box 2 :out 0)) (:to (:box 1 :in 1)))
      (:connection (:from (:box 3 :out 0)) (:to (:box 2 :in 0)))
      (:connection (:from (:box 4 :out 0)) (:to (:box 5 :in 1)))
      (:connection
       (:from (:box 5 :out 0))
       (:to (:box 1 :in 0))
       (:attributes
        (:color (:color 0.0 0.0 1.0 1.0) :style nil :modif nil)))
      (:connection
       (:from (:box 6 :out 0))
       (:to (:box 3 :in 1))
       (:attributes
        (:color (:color 0.0 1.0 0.0 1.0) :style nil :modif nil)))
      (:connection
       (:from (:box 7 :out 0))
       (:to (:box 3 :in 0))
       (:attributes
        (:color (:color 1.0 0.0 0.0 1.0) :style nil :modif nil)))
      (:connection
       (:from (:box 8 :out 0))
       (:to (:box 5 :in 0))
       (:attributes
        (:color (:color 0.0 0.0 1.0 1.0) :style nil :modif nil)))
      (:connection
       (:from (:box 9 :out 0))
       (:to (:box 6 :in 0))
       (:attributes
        (:color (:color 0.0 1.0 0.0 1.0) :style nil :modif nil)))
      (:connection
       (:from (:box 10 :out 0))
       (:to (:box 7 :in 0))
       (:attributes
        (:color (:color 1.0 0.0 0.0 1.0) :style nil :modif nil)))
      (:connection
       (:from (:box 12 :out 0))
       (:to (:box 8 :in 0))
       (:attributes
        (:color (:color 0.0 0.0 1.0 1.0) :style nil :modif nil)))
      (:connection
       (:from (:box 12 :out 0))
       (:to (:box 9 :in 0))
       (:attributes
        (:color (:color 0.0 1.0 0.0 1.0) :style nil :modif nil)))
      (:connection
       (:from (:box 12 :out 0))
       (:to (:box 10 :in 0))
       (:attributes
        (:color (:color 1.0 0.0 0.0 1.0) :style nil :modif nil))))))
   (:group-id nil)
   (:name "patch")
   (:x 3811/7)
   (:y 125/7)
   (:w 68)
   (:h 48)
   (:color nil)
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align :center)
   (:display :hidden)
   (:lock nil)
   (:lambda :lambda)
   (:pre-delay 0)
   (:inputs
    (:input
     (:type :standard)
     (:name "input")
     (:value nil)
     (:reactive nil)))
   (:outputs (:output (:name "output") (:reactive nil)))
   (:id 3))
  (:box
   (:type :value)
   (:reference symbol)
   (:group-id nil)
   (:name "aux")
   (:x 4448/7)
   (:y 251/7)
   (:w 87)
   (:h 30)
   (:color
    (:color-or-nil (:color (:color 1.0 1.0 1.0 1.0)) (:t-or-nil t)))
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align nil)
   (:lock nil)
   (:inputs)
   (:outputs (:output (:name "value") (:reactive nil)))
   (:value :d1_offs_d2)
   (:id 4))
  (:box
   (:library "Cluster-Engine")
   (:type :function)
   (:reference (:symbol "RRHYTHM-RHYTHM" "CLUSTER-ENGINE"))
   (:group-id nil)
   (:name "rrhythm-rhythm")
   (:x 4098/7)
   (:y 650/7)
   (:w 125)
   (:h 29)
   (:color nil)
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align nil)
   (:icon :left)
   (:lock nil)
   (:lambda nil)
   (:inputs
    (:input
     (:type :standard)
     (:name "RULE")
     (:value nil)
     (:reactive nil))
    (:input
     (:type :standard)
     (:name "VOICE1")
     (:value 0)
     (:reactive nil))
    (:input
     (:type :standard)
     (:name "VOICE2")
     (:value 1)
     (:reactive nil))
    (:input
     (:type :standard)
     (:name "INPUT-MODE1")
     (:value :d1_offs_d2)
     (:reactive nil))
    (:input
     (:type :standard)
     (:name "INPUT-MODE2")
     (:value :norm)
     (:reactive nil))
    (:input
     (:type :standard)
     (:name "INPUT-FILTER")
     (:value :at-durations-v1)
     (:reactive nil)))
   (:outputs (:output (:name "out") (:reactive nil)))
   (:id 5))
  (:box
   (:type :object)
   (:reference poly)
   (:group-id nil)
   (:name "POLY")
   (:x 471)
   (:y 333)
   (:w 646)
   (:h 139)
   (:color nil)
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align :center)
   (:display :mini-view)
   (:showname nil)
   (:show-markers t)
   (:lock nil)
   (:lambda nil)
   (:inputs
    (:input
     (:type :standard)
     (:name "SELF")
     (:value nil)
     (:reactive nil))
    (:input
     (:type :standard)
     (:name "OBJ-LIST")
     (:value
      (:list
       (:object
        (:class voice)
        (:slots
         ((:onset 0)
          (:duration 3999)
          (:interpol (:number-or-nil (:number 50) (:t-or-nil nil)))
          (:name nil)
          (:symbolic-date nil)
          (:symbolic-dur nil)
          (:symbolic-dur-extent 0)
          (:extras nil)
          (:group-ids nil)
          (:tree (:list 1 (:list (:list (:list 4 4) (:list 1 1 1 1)))))
          (:lmidic (:list 6000))
          (:lonset (:list 0 1000 2000 3000 4000))
          (:ldur (:list 999))
          (:lvel (:list 100))
          (:loffset (:list 0))
          (:lchan (:list 1))
          (:lport (:list nil))
          (:llegato nil)
          (:tempo 60))))))
     (:reactive nil)))
   (:outputs
    (:output (:name "SELF") (:reactive nil))
    (:output (:name "OBJ-LIST") (:reactive nil)))
   (:window (:size nil) (:position nil))
   (:edition-params
    (:time-map
     (:list
      (:list -1000 0)
      (:list 0 7.5)
      (:list 667 16.0)
      (:list 1333 24.0)
      (:list 1667 28.25)
      (:list 2000 32.5)
      (:list 2167 36.75)
      (:list 2667 47.625)
      (:list 2833 52.5)
      (:list 3000 56.75)
      (:list 3167 61.0)
      (:list 3333 64.625)
      (:list 4667 75.625)
      (:list 4833 79.25)
      (:list 5333 90.125)
      (:list 5500 98.125)
      (:list 6000 103.0)
      (:list 6667 107.875)
      (:list 6833 115.875)
      (:list 7333 120.75))))
   (:value
    (:object
     (:class poly)
     (:slots
      ((:chord-seqs
        (:list
         (:object
          (:class voice)
          (:slots
           ((:onset 0)
            (:duration 6832)
            (:interpol (:number-or-nil (:number 50) (:t-or-nil nil)))
            (:name nil)
            (:symbolic-date nil)
            (:symbolic-dur nil)
            (:symbolic-dur-extent 0)
            (:extras nil)
            (:group-ids nil)
            (:tree
             (:list
              3
              (:list
               (:list (:list 4 4) (:list -2 (:list 1 (:list 1 1)) 1.0))
               (:list
                (:list 4 4)
                (:list
                 (:list 1 (:list 1.0 1))
                 2
                 (:list 1 (:list 1 3))))
               (:list
                (:list 4 4)
                (:list
                 (:list 1 (:list 1.0 3))
                 1.0
                 (:list 1 (:list 1.0 -3))
                 -1)))))
            (:lmidic (:list 7200))
            (:lonset (:list 1333 1667 3000 3333 4667 4833 5500 8000))
            (:ldur
             (:list
              (:list 333)
              (:list 1332)
              (:list 332)
              (:list 1333)
              (:list 165)
              (:list 666)
              (:list 1332)))
            (:lvel (:list 100))
            (:loffset (:list 0))
            (:lchan (:list 1))
            (:lport (:list nil))
            (:llegato nil)
            (:tempo 90))))
         (:object
          (:class voice)
          (:slots
           ((:onset 0)
            (:duration 6666)
            (:interpol (:number-or-nil (:number 50) (:t-or-nil nil)))
            (:name nil)
            (:symbolic-date nil)
            (:symbolic-dur nil)
            (:symbolic-dur-extent 0)
            (:extras nil)
            (:group-ids nil)
            (:tree
             (:list
              3
              (:list
               (:list (:list 4 4) (:list 1 2 (:list 1 (:list 1 3))))
               (:list (:list 4 4) (:list (:list 1 (:list 1.0 2 1)) -3))
               (:list (:list 4 4) (:list 2 -2)))))
            (:lmidic (:list 6700))
            (:lonset (:list 0 667 2000 2167 2833 3167 5333 8000))
            (:ldur
             (:list
              (:list 666)
              (:list 1332)
              (:list 166)
              (:list 665)
              (:list 333)
              (:list 165)
              (:list 1333)))
            (:lvel (:list 100))
            (:loffset (:list 0))
            (:lchan (:list 1))
            (:lport (:list nil))
            (:llegato nil)
            (:tempo 90))))))
       (:symbolic-date nil)
       (:symbolic-dur nil)
       (:symbolic-dur-extent 0)
       (:extras nil)
       (:group-ids nil)))))
   (:id 6))
  (:comment
   (:x 11)
   (:y 31)
   (:w 405)
   (:h 443)
   (:fgcolor (:color 0 0 0 1.0))
   (:bgcolor nil)
   (:border 0)
   (:roundness nil)
   (:text-font (:font (:face "Verdana") (:size 12) (:style :plain)))
   (:align nil)
   (:text
    "POLYPHONIC RHYTHM RULES 2

The rrhythm-rhythm accesses durations in two voices. It passes the information about the length of the durations and how they are positioned relative to each other (i.e. if their onset is simultaneous, or if there is an offset between them). This information is chosen in the first menu in the fourth input  (never pass more information than the internal patch need, since that will make the search less efficient).

The menu in the sixth input sets the time points for where the rule is checked: either it is only checked at notes in the first voice (:at-durations-v1), or it is checked at notes AND rests (:at-events-v1). Note that even if the rule is only checked at notes, it might find simultaneous rests in the other voice (rests will be indicated as negative fractions).

In the example patch, the rule is checked at the onset of each note in the first voice. The information that is passed to the internal patch has the format '(duration-voice1 offset duration-voice2). The offset is the duration between the onset for the duration in the first voice and the onset for the duration in the second voice (a negative offset means that the event in the second voice starts before the event in the first voice).

The rule restricts onsets in the two voices to never be simultaneous (open the internal patch to see how it is done). Note that there is a risk that the solution contains many rests to satisfy the constraint.")
   (:id 7)))
 (:connections
  (:connection (:from (:box 0 :out 0)) (:to (:box 1 :in 3)))
  (:connection (:from (:box 1 :out 0)) (:to (:box 6 :in 1)))
  (:connection (:from (:box 2 :out 0)) (:to (:box 1 :in 7)))
  (:connection (:from (:box 2 :out 0)) (:to (:box 1 :in 9)))
  (:connection (:from (:box 3 :out 0)) (:to (:box 5 :in 0)))
  (:connection (:from (:box 4 :out 0)) (:to (:box 5 :in 3)))
  (:connection (:from (:box 5 :out 0)) (:to (:box 0 :in 0)))))