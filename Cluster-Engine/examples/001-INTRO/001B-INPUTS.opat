
(:patch
 (:name "001B-INPUTS")
 (:doc "")
 (:info
  (:created "2021/07/10 15:13:00")
  (:modified "2021/07/10 15:13:07")
  (:by "om-sharp")
  (:version 1.03))
 (:window (:size (1315 711)) (:position (21 23)))
 (:grid nil)
 (:lock nil)
 (:boxes
  (:comment
   (:x 675)
   (:y 44)
   (:w 587)
   (:h 473)
   (:fgcolor (:color 0 0 0 1.0))
   (:bgcolor nil)
   (:border 0)
   (:roundness nil)
   (:text-font (:font (:face "Verdana") (:size 12) (:style :plain)))
   (:align nil)
   (:text
    "Inputs: domains

metric-domain: Regardless of how many voices the system is searching for, the first input for the domains is always the metric domain. All voices share the same sequences of time signatures. The metric domain is a list of allowed time signatures, for example '((4 4)(3 4)). If the metric domain is empty, it is assumed that the time signature is 4//4 (non-metric notation is not possible in the system). It is also possible to define how the metric structure interact with some rules in more details by using the metricdomain function (see further on in this tutorial).

Each following row has two inputs, which are the rhythm and pitch domains for one voice.

rhythmdomain: A voice needs at least one duration value in its rhythm domain. Candidates in a rhythm domain can either be single note values or durations grouped into motifs (see further on in this tutorial).

pitchdomain: Candidates in a pitch domain can either be single pitches, pitches grouped into motifs or melodic profiles (see further on in this tutorial). If a user wants to only search for a sequence of pitches, a single duration (for example a whole note) should be given as a rhythm domain.

Note that a domain with only one candidate does not trigger a search, since it gives no choices for the system. Engines with one-candidate domains will never backtrack and thus not 
slow down the search in the other engines. At least one engine will have to have a domain with more than one candidate to make the box output a score.

The cluster-engine function can be expanded to support up to 10 voices (this is only a graphic limitation, and can in principle be increased).

The system will stop after 1,000,000 loops even if no solution was found (this can be increased). ")
   (:id 0))
  (:comment
   (:x 16)
   (:y 44)
   (:w 595)
   (:h 458)
   (:fgcolor (:color 0 0 0 1.0))
   (:bgcolor nil)
   (:border 0)
   (:roundness nil)
   (:text-font (:font (:face "Verdana") (:size 12) (:style :plain)))
   (:align nil)
   (:text
    "Inputs: general parameters 

no-of-variables: When any engine has assigned candidates (i.e. durations or pitches) to this number of variables, the search will stop and the solution will be output. Note that other engines than the one that caused the search to halt will have assigned candidates to less number of variables. Note also that a variable can in some cases be more than one duration/pitch (see further on in this tutorial).
rnd?: This is a flag that is either true or false. If it is true, the candidates in the domain will be visited in random order. If it is false, the system will always try the first candidate in the domain before trying the second, etc. If the rules are not very strict, the resulting score may be very repetitive if this flag is false. Using heuristic rules (see further on in this tutorial) may remove 
the effect of this setting. 
debug?: This is a flag that is either true or false. If it is true, the system will store some information during the search to support available debugging tools. The system will also print
the highest index numbers (i.e. the number of assigned variables - 1) for each engine during the search, and information about how many times the system backtracked during the search 
(this information is only printed when a solution is found).

rules: This is the input for all rules (strict as well as heuristic rules). A single rule can be directly connected to this input. If more than one rule is used, they are collected by the rules->cluster 
box before connected to this input.

tempo: Tempo is not part of the search and cannot be accessed internally by the rules. 
The tempo setting will only set the tempo in the resulting score, affecting the MIDI playback.

output: This is a menu where you can choose the format of the output. \":voices\" will assume that the function is connected to a Poly object (second input) that will receive a score object. \":list\" will make the cluster-engine function output a list of lists, where each sublist is an engine's sequence of variables. The last sublist will be the sequence of time signatures.\" 
")
   (:id 1)))
 (:connections))