; OM File Header - Saved 2021/07/23 2:00:44
; (6.18 :patc (om-make-point 196 23) (om-make-point 40 23) (om-make-point 1241 638) "" 183 0 "2021/07/06 18:26:53" "2021/07/15 21:44:14")
; End File Header
(in-package :om)(load-lib-for (quote ("Cluster-Engine")))(setf *om-current-persistent* (om-load-patch1 "005f-rule-only-pitch-profile" (quote ((let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 636 106) (om-make-point 27 30) 0 "0" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 671 107) (om-make-point 37 30) (list 2) "(2)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "RONLY-M-MOTIFS" (quote cluster-engine::ronly-m-motifs) (quote ((om-load-inputfun (quote input-funbox) "voice-number" "VOICES" 0))) (om-make-point 786 141) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "RRHYTHMS-ONE-VOICE-AT-TIMEPOINTS" (quote cluster-engine::rrhythms-one-voice-at-timepoints) (quote ((om-load-inputfun (quote input-funbox) "rule" "RULE" nil) (om-load-inputfun (quote input-funbox) "voice-number" "VOICE" 0) (om-load-inputfun (quote input-funbox) "list-of-timepoints" "TIMEPOINTS" (list 0)) (om-load-inputfunmenu1 (quote input-funmenu) "input-mode" "INPUT-MODE" (quote :dur-start) (list (list "motifs-start" (quote :motifs-start)) (list "motifs-end" (quote :motifs-end)) (list "dur-start" (quote :dur-start)))))) (om-make-point 570 142) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 976 284) (om-make-point 226 30) (list (list 6000) (list (quote m) 700 -300) (list (quote m) -700 300)) "((6000) (m 700 -300) (m -700 300))" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "RULES-TO-CLUSTER" (quote cluster-engine::rules-to-cluster) (quote ((om-load-inputfun (quote input-funbox) "rules" "RULES?" nil) (om-load-inputfun (quote input-funbox) "rules" "RULES?" nil))) (om-make-point 694 246) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 2" (quote list) (quote nil) (om-make-point 880 256) (om-make-point 155 29) (list (list 1/4) (list 1/8) (list 1/16) (list 3/8)) "((1/4) (1/8) (1/16) (3/8))" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "POLY" (quote poly) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "list of VOICE objects" "voices" (list (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (1 (((4 4) (1 1 1 1))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 60) nil)) :legato 100 :ties (quote (nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj))))) (om-make-point 643 478) (om-make-point 455 127) (if (find-class (quote poly) nil) (let ((newobj (make-instance (quote poly) :voices (list (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (3 (((4 4) ((1 (1 3)) (1 (1.0 2 1)) (1 (3.0 1)) (1 (3.0 1)))) ((4 4) ((1 (3.0 1)) (1 (3.0 1)) 1 (1 (2.0 1 1)))) ((4 4) (1 -3))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (167)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5700)) :ldur (quote (167)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (167)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (167)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (167)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100)) :ldur (quote (167)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6800)) :ldur (quote (667)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7500)) :ldur (quote (167)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7200)) :ldur (quote (167)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7900)) :ldur (quote (667)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 90) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) :from-file t))) (load-port-info newobj (quote (nil))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 2 24 (list (quote gf)) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :osc-scoreplayer) 1 nil 1000 0 (om-make-point 574 302) (om-make-point 400 23) 0 1 (quote :normal) (quote t) nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "rule-1" (om-load-patch-abs1 "rule-1" (quote ((let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 267 68) (om-make-point 60 30) (list 0 1/4) "(0 1/4)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 228 221) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "EQUAL" (quote equal) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil) (om-load-inputfun (quote input-funbox) "Y" "Y" nil))) (om-make-point 233 139) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 190 40) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((2 0 1 0 nil 0) (3 0 2 0 nil 0) (0 0 2 1 nil 0))) 6.18 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 591 49) nil (list nil) "l" "rule-1"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "CLUSTER-ENGINE" (quote cluster-engine::cluster-engine) (quote ((om-load-inputfun (quote input-funbox) "integer" "NO-OF-VARIABLES" 12) (om-load-inputfun (quote input-funbox) "t/nil" "RND?" (quote t)) (om-load-inputfun (quote input-funbox) "t/nil" "DEBUG?" nil) (om-load-inputfun (quote input-funbox) "t/nil" "RULES" nil) (om-load-inputfun (quote input-funbox) "number" "TEMPO" 90) (om-load-inputfunmenu1 (quote input-funmenu) "voices-or-list" "OUTPUT" (quote :voices) (list (list "voices" (quote :voices)) (list "list" (quote :list)))) (om-load-inputfun (quote input-funbox) "list-of-timsig" "METRIC-DOMAIN" (list (list 4 4))) (om-load-inputfun (quote input-funbox) "ratios" "RHYTHMDOMAIN0" (list (list 1/4))) (om-load-inputfun (quote input-funbox) "midics" "PITCHDOM0" nil))) (om-make-point 815 377) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 519 530) (quote "RULES ONE ENGINE 6$$Rule that only allow pitch profiles:$$If the domain contains pitch profiles (see tutorial 003b), it also has to contain at least  one candidate with fixed pitches (in this example MIDICENTS note 6000).$If 6000 is only considered the starting point, it is not desired that the engine picks this candidate more than once. The rule ronly-m-motifs assures this.$$$Rules for durations at time-points:$$The rrhythm-one-voice-at-timepoints has similarities to an index rule: The rule constrain a specific variable. The difference is that which variable(s) depend on their time point in the score. The position of a variable vary depends on the durations of the previous events in the score. $$The internal patch in the example patch receives a list with the information '(offset duration).  Offset is the duration between the starting point of the duration and the timepoint given by the user on the rrhythm-one-voice-at-timepoints function.  If the duration starts at the given timepoint, the offset will be 0. If the duration starts before the timepoint (and thus sustain over the timepoint) the offset will be a negative fraction. The internal patch needs as many inputs as there are given time points.$$In the example patch, the rule forces the 3rd measure to have a quarter note at the first downbeat.") "" (om-make-point 8 42) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((8 0 3 0 nil 0) (0 0 3 1 nil 0) (1 0 3 2 nil 0) (3 0 5 0 nil 0) (2 0 5 1 nil 0) (9 0 7 1 nil 0) (5 0 9 3 nil 0) (6 0 9 7 nil 0) (4 0 9 8 nil 0))) nil 6.18))
