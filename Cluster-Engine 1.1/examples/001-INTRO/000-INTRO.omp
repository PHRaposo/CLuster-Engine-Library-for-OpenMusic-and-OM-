; OM File Header - Saved 2021/07/23 2:04:36
; (6.18 :patc (om-make-point 409 501) (om-make-point 0 23) (om-make-point 1319 592) "" 183 0 "2021/07/05 21:17:38" "2021/07/23 2:04:31")
; End File Header
; External resources 
; (list (list (quote :picture) "#P\"C:../../resources/pict/search_structure2\"" "#P\"C:../../resources/pict/search_structure1\""))
(in-package :om)(load-lib-for (quote nil))(setf *om-current-persistent* (om-load-patch1 "000-INTRO" (quote ((let ((box (om-load-boxcomment "comment 5" (om-make-point 62 29) (quote "Figure 2") "" (om-make-point 1044 410) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 62 29) (quote "Figure 1") "" (om-make-point 618 403) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 4" (om-make-point 419 296) (quote "The Cluster Engine is a system for solving musical constraint satisfaction problems. The solution to a musical constraint satisfaction problem is a score that satisfies a set of constraints defined by the user/composer. The name The Cluster Engine refers to the idea of using a cluster of search engines that collaboratively solve a problem (similar to the idea of a computer cluster). $$$$$The Cluster Engine breaks down the musical score into several sequences of variables. Each sequence refers to the succession of elements for a specific parameter in a voice in the score, for example a sequence can refer to the pitches in one voice. A single voice is represented by two sequences: one for pitches and one for durations (including rests). One additional sequence represents the metric structure in the score.") "" (om-make-point 41 187) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 3" (om-make-point 341 168) (quote "THE CLUSTER ENGINE LIBRARY FOR OPENMUSIC$$PWGL VERSION BY ORJAN SANDRED (2010)$$PLAIN LISP VERSION BY ORJAN SANDRED, TORSTEN ANDERS AND JULIEN VINCENOT$Available at: https://github.com/tanders/cluster-engine$$OM VERSION BY PAULO RAPOSO (2021)") "" (om-make-point 62 11) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 2" (om-make-point 358 58) (quote "Several engines collaboratively solve a problem. In the figure, \"dur\" refers to a single duration and \"rhythm\" refers to a group of durations (i.e. a motif).$") "" (om-make-point 501 463) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 373 121) (quote "The score corresponds to the sequences of variables in figure 1. For example, the first voice in figure 2 is built by the first two engines in figure 1: the first whole note corresponds to the \"dur\" box in the first engine in figure 1, and the two half notes correspond to the \"rhythm\" box. The three \"pitch\" boxes in the second engine in figure 1 correspond to the three pitches in the first voice in figure 2.") "" (om-make-point 893 458) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote nil) (list (let ((newpict (make-instance (quote patch-picture) :name "search_structure2" :source (quote user) :pict-pathname (restore-pict-path (restore-path nil)) :thepict (om-get-picture "search_structure2" (quote user)) :storemode :external :draw-params (quote (p 0 0 100 100)) :extraobjs nil))) (setf (pict-pos newpict) (om-make-point 796 85)) (setf (pict-size newpict) (om-make-point 440 339)) newpict) (let ((newpict (make-instance (quote patch-picture) :name "search_structure1" :source (quote user) :pict-pathname (restore-pict-path (restore-path nil)) :thepict (om-get-picture "search_structure1" (quote user)) :storemode :external :draw-params (quote (p 0 0 100 100)) :extraobjs nil))) (setf (pict-pos newpict) (om-make-point 473 113)) (setf (pict-size newpict) (om-make-point 333 287)) newpict)) 6.18))
