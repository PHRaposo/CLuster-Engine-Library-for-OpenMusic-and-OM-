
(:patch
 (:name "007c-metric-rules-one-voice")
 (:doc "")
 (:info
  (:created "2021/07/12 22:41:06")
  (:modified "2021/07/12 22:42:46")
  (:by "om-sharp")
  (:version 1.03))
 (:window (:size (1289 638)) (:position (21 23)))
 (:grid nil)
 (:lock nil)
 (:boxes
  (:box
   (:library "Cluster-Engine")
   (:type :function)
   (:reference (:symbol "RNOTE-METER" "CLUSTER-ENGINE"))
   (:group-id nil)
   (:name "rnote-meter")
   (:x 638)
   (:y 156)
   (:w 104)
   (:h 29)
   (:color nil)
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align nil)
   (:icon :left)
   (:lock nil)
   (:lambda nil)
   (:inputs
    (:input
     (:type :standard)
     (:name "RULE")
     (:value nil)
     (:reactive nil))
    (:input
     (:type :standard)
     (:name "VOICES")
     (:value 0)
     (:reactive nil))
    (:input
     (:type :standard)
     (:name "FORMAT")
     (:value :offs)
     (:reactive nil))
    (:input
     (:type :standard)
     (:name "METRIC-STRUCTURE")
     (:value :beats)
     (:reactive nil))
    (:input
     (:type :standard)
     (:name "REST-MODE")
     (:value :incl-rests)
     (:reactive nil)))
   (:outputs (:output (:name "out") (:reactive nil)))
   (:id 0))
  (:box
   (:type :value)
   (:reference symbol)
   (:group-id nil)
   (:name "aux 9")
   (:x 719)
   (:y 126)
   (:w 64)
   (:h 29)
   (:color
    (:color-or-nil (:color (:color 1.0 1.0 1.0 1.0)) (:t-or-nil t)))
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align nil)
   (:lock nil)
   (:inputs)
   (:outputs (:output (:name "value") (:reactive nil)))
   (:value :incl-rests)
   (:id 1))
  (:box
   (:type :value)
   (:reference symbol)
   (:group-id nil)
   (:name "aux 2")
   (:x 686)
   (:y 99)
   (:w 55)
   (:h 30)
   (:color
    (:color-or-nil (:color (:color 1.0 1.0 1.0 1.0)) (:t-or-nil t)))
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align nil)
   (:lock nil)
   (:inputs)
   (:outputs (:output (:name "value") (:reactive nil)))
   (:value :beats)
   (:id 2))
  (:box
   (:type :value)
   (:reference symbol)
   (:group-id nil)
   (:name "aux")
   (:x 646)
   (:y 75)
   (:w 59)
   (:h 30)
   (:color
    (:color-or-nil (:color (:color 1.0 1.0 1.0 1.0)) (:t-or-nil t)))
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align nil)
   (:lock nil)
   (:inputs)
   (:outputs (:output (:name "value") (:reactive nil)))
   (:value :d_offs)
   (:id 3))
  (:box
   (:type :object)
   (:reference poly)
   (:group-id nil)
   (:name "POLY")
   (:x 626)
   (:y 472)
   (:w 562)
   (:h 90)
   (:color nil)
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align :center)
   (:display :mini-view)
   (:showname nil)
   (:show-markers t)
   (:lock nil)
   (:lambda nil)
   (:inputs
    (:input
     (:type :standard)
     (:name "SELF")
     (:value nil)
     (:reactive nil))
    (:input
     (:type :standard)
     (:name "OBJ-LIST")
     (:value
      (:list
       (:object
        (:class voice)
        (:slots
         ((:onset 0)
          (:duration 3999)
          (:interpol (:number-or-nil (:number 50) (:t-or-nil nil)))
          (:name nil)
          (:symbolic-date nil)
          (:symbolic-dur nil)
          (:symbolic-dur-extent 0)
          (:extras nil)
          (:group-ids nil)
          (:tree (:list 1 (:list (:list (:list 4 4) (:list 1 1 1 1)))))
          (:lmidic (:list 6000))
          (:lonset (:list 0 1000 2000 3000 4000))
          (:ldur (:list 999))
          (:lvel (:list 100))
          (:loffset (:list 0))
          (:lchan (:list 1))
          (:lport (:list nil))
          (:llegato nil)
          (:tempo 60))))))
     (:reactive nil)))
   (:outputs
    (:output (:name "SELF") (:reactive nil))
    (:output (:name "OBJ-LIST") (:reactive nil)))
   (:window (:size nil) (:position nil))
   (:edition-params
    (:time-map
     (:list
      (:list -1000 0)
      (:list 0 8.3)
      (:list 667 13.8)
      (:list 889 17.633334)
      (:list 1111 21.466668)
      (:list 1333 25.300002)
      (:list 1556 29.933335)
      (:list 1778 33.76667)
      (:list 2000 37.600003)
      (:list 2222 41.433335)
      (:list 2444 45.266667)
      (:list 2667 55.1)
      (:list 2833 58.725)
      (:list 3000 62.35)
      (:list 3333 66.6)
      (:list 3500 70.225)
      (:list 3833 74.475)
      (:list 4000 78.9)
      (:list 4333 83.950005)
      (:list 4667 88.200005)
      (:list 4889 92.03334)
      (:list 5111 95.86668)
      (:list 5333 105.20001))))
   (:value
    (:object
     (:class poly)
     (:slots
      ((:chord-seqs
        (:list
         (:object
          (:class voice)
          (:slots
           ((:onset 0)
            (:duration 5332)
            (:interpol (:number-or-nil (:number 50) (:t-or-nil nil)))
            (:name nil)
            (:symbolic-date nil)
            (:symbolic-dur nil)
            (:symbolic-dur-extent 0)
            (:extras nil)
            (:group-ids nil)
            (:tree
             (:list
              3
              (:list
               (:list
                (:list 4 4)
                (:list
                 1
                 (:list 1 (:list 1 1 1))
                 (:list 1 (:list 1 1 1))
                 (:list 1 (:list 1 1 1))))
               (:list
                (:list 4 4)
                (:list
                 (:list 1 (:list 1 1 2))
                 (:list 1 (:list 1 2 1))
                 (:list 1 (:list 1 1))
                 (:list 1 (:list 1 1 1))))
               (:list (:list 4 4) (:list -4)))))
            (:lmidic
             (:list
              (:list 7500)
              (:list 7900)
              (:list 6800)
              (:list 6800)
              (:list 7100)
              (:list 7300)
              (:list 6600)
              (:list 6900)
              (:list 6900)
              (:list 7200)
              (:list 7400)
              (:list 7000)
              (:list 6800)
              (:list 6900)
              (:list 6600)
              (:list 7200)
              (:list 6100)
              (:list 6100)
              (:list 6000)
              (:list 7900)
              (:list 6400)))
            (:lonset
             (:list
              0
              667
              889
              1111
              1333
              1556
              1778
              2000
              2222
              2444
              2667
              2833
              3000
              3333
              3500
              3833
              4000
              4333
              4667
              4889
              5111
              8000))
            (:ldur
             (:list
              (:list 666)
              (:list 221)
              (:list 221)
              (:list 221)
              (:list 222)
              (:list 221)
              (:list 221)
              (:list 221)
              (:list 221)
              (:list 222)
              (:list 165)
              (:list 166)
              (:list 332)
              (:list 166)
              (:list 332)
              (:list 166)
              (:list 332)
              (:list 333)
              (:list 221)
              (:list 221)
              (:list 221)))
            (:lvel (:list 100))
            (:loffset (:list 0))
            (:lchan (:list 1))
            (:lport (:list nil))
            (:llegato nil)
            (:tempo 90))))))
       (:symbolic-date nil)
       (:symbolic-dur nil)
       (:symbolic-dur-extent 0)
       (:extras nil)
       (:group-ids nil)))))
   (:id 4))
  (:box
   (:type :function)
   (:reference arithm-ser)
   (:group-id nil)
   (:name "arithm-ser")
   (:x 1037)
   (:y 228)
   (:w 96)
   (:h 29)
   (:color nil)
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align nil)
   (:icon :left)
   (:lock nil)
   (:lambda nil)
   (:inputs
    (:input
     (:type :standard)
     (:name "BEGIN")
     (:value 6000)
     (:reactive nil))
    (:input
     (:type :standard)
     (:name "END")
     (:value 7900)
     (:reactive nil))
    (:input
     (:type :standard)
     (:name "STEP")
     (:value 100)
     (:reactive nil)))
   (:outputs (:output (:name "out") (:reactive nil)))
   (:id 5))
  (:box
   (:type :function)
   (:reference list)
   (:group-id nil)
   (:name "list")
   (:x 1007)
   (:y 264)
   (:w 54)
   (:h 29)
   (:color nil)
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align nil)
   (:icon :left)
   (:lock nil)
   (:lambda :lambda)
   (:inputs
    (:input
     (:type :optional)
     (:name "x")
     (:value nil)
     (:reactive nil)))
   (:outputs (:output (:name "out") (:reactive nil)))
   (:id 6))
  (:box
   (:type :function)
   (:reference mapcar)
   (:group-id nil)
   (:name "mapcar")
   (:x 1036)
   (:y 316)
   (:w 77)
   (:h 29)
   (:color nil)
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align nil)
   (:icon :left)
   (:lock nil)
   (:lambda nil)
   (:inputs
    (:input
     (:type :standard)
     (:name "FUNCTION")
     (:value nil)
     (:reactive nil))
    (:input
     (:type :standard)
     (:name "LIST")
     (:value nil)
     (:reactive nil)))
   (:outputs (:output (:name "out") (:reactive nil)))
   (:id 7))
  (:box
   (:type :value)
   (:reference fixnum)
   (:group-id nil)
   (:name "aux 8")
   (:x 1024)
   (:y 196)
   (:w 37)
   (:h 29)
   (:color
    (:color-or-nil (:color (:color 1.0 1.0 1.0 1.0)) (:t-or-nil t)))
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align nil)
   (:lock nil)
   (:inputs)
   (:outputs (:output (:name "value") (:reactive nil)))
   (:value 6000)
   (:id 8))
  (:box
   (:type :value)
   (:reference fixnum)
   (:group-id nil)
   (:name "aux 7")
   (:x 1047)
   (:y 171)
   (:w 48)
   (:h 30)
   (:color
    (:color-or-nil (:color (:color 1.0 1.0 1.0 1.0)) (:t-or-nil t)))
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align nil)
   (:lock nil)
   (:inputs)
   (:outputs (:output (:name "value") (:reactive nil)))
   (:value 7900)
   (:id 9))
  (:box
   (:type :value)
   (:reference fixnum)
   (:group-id nil)
   (:name "aux 6")
   (:x 1084)
   (:y 198)
   (:w 32)
   (:h 29)
   (:color
    (:color-or-nil (:color (:color 1.0 1.0 1.0 1.0)) (:t-or-nil t)))
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align nil)
   (:lock nil)
   (:inputs)
   (:outputs (:output (:name "value") (:reactive nil)))
   (:value 100)
   (:id 10))
  (:box
   (:type :value)
   (:reference cons)
   (:group-id nil)
   (:name "list")
   (:x 837)
   (:y 291)
   (:w 161)
   (:h 30)
   (:color
    (:color-or-nil (:color (:color 1.0 1.0 1.0 1.0)) (:t-or-nil t)))
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align nil)
   (:lock nil)
   (:inputs)
   (:outputs (:output (:name "value") (:reactive nil)))
   (:value (:list (:list 1/12) (:list 1/16) (:list 1/8) (:list 1/4)))
   (:id 11))
  (:box
   (:library "Cluster-Engine")
   (:type :function)
   (:reference (:symbol "CLUSTER-ENGINE" "CLUSTER-ENGINE"))
   (:group-id nil)
   (:name "cluster-engine")
   (:x 832)
   (:y 364)
   (:w 116)
   (:h 29)
   (:color nil)
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align nil)
   (:icon :left)
   (:lock nil)
   (:lambda nil)
   (:inputs
    (:input
     (:type :standard)
     (:name "NO-OF-VARIABLES")
     (:value 21)
     (:reactive nil))
    (:input
     (:type :standard)
     (:name "RND?")
     (:value t)
     (:reactive nil))
    (:input
     (:type :standard)
     (:name "DEBUG?")
     (:value nil)
     (:reactive nil))
    (:input
     (:type :standard)
     (:name "RULES")
     (:value nil)
     (:reactive nil))
    (:input
     (:type :standard)
     (:name "TEMPO")
     (:value 90)
     (:reactive nil))
    (:input
     (:type :standard)
     (:name "OUTPUT")
     (:value :voices)
     (:reactive nil))
    (:input
     (:type :standard)
     (:name "METRIC-DOMAIN")
     (:value (:list (:list 4 4)))
     (:reactive nil))
    (:input
     (:type :standard)
     (:name "RHYTHMDOMAIN0")
     (:value (:list (:list 1/4)))
     (:reactive nil))
    (:input
     (:type :standard)
     (:name "PITCHDOMAIN0")
     (:value nil)
     (:reactive nil)))
   (:outputs (:output (:name "out") (:reactive nil)))
   (:id 12))
  (:box
   (:library "Cluster-Engine")
   (:type :function)
   (:reference (:symbol "RULES-TO-CLUSTER" "CLUSTER-ENGINE"))
   (:group-id nil)
   (:name "rules-to-cluster")
   (:x 728)
   (:y 261)
   (:w 124)
   (:h 29)
   (:color nil)
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align nil)
   (:icon :left)
   (:lock nil)
   (:lambda nil)
   (:inputs
    (:input
     (:type :optional)
     (:name "rules?")
     (:value nil)
     (:reactive nil))
    (:input
     (:type :optional)
     (:name "rules?")
     (:value nil)
     (:reactive nil)))
   (:outputs (:output (:name "out") (:reactive nil)))
   (:id 13))
  (:box
   (:type :value)
   (:reference symbol)
   (:group-id nil)
   (:name "aux 5")
   (:x 849)
   (:y 125)
   (:w 77)
   (:h 30)
   (:color
    (:color-or-nil (:color (:color 1.0 1.0 1.0 1.0)) (:t-or-nil t)))
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align nil)
   (:lock nil)
   (:inputs)
   (:outputs (:output (:name "value") (:reactive nil)))
   (:value :durations)
   (:id 14))
  (:box
   (:type :value)
   (:reference fixnum)
   (:group-id nil)
   (:name "aux 4")
   (:x 800)
   (:y 125)
   (:w 32)
   (:h 30)
   (:color
    (:color-or-nil (:color (:color 1.0 1.0 1.0 1.0)) (:t-or-nil t)))
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align nil)
   (:lock nil)
   (:inputs)
   (:outputs (:output (:name "value") (:reactive nil)))
   (:value 0)
   (:id 15))
  (:box
   (:library "Cluster-Engine")
   (:type :function)
   (:reference (:symbol "RMETRIC-HIERARCHY" "CLUSTER-ENGINE"))
   (:group-id nil)
   (:name "rmetric-hierarchy")
   (:x 797)
   (:y 158)
   (:w 132)
   (:h 29)
   (:color nil)
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align nil)
   (:icon :left)
   (:lock nil)
   (:lambda nil)
   (:inputs
    (:input
     (:type :standard)
     (:name "VOICES")
     (:value 0)
     (:reactive nil))
    (:input
     (:type :standard)
     (:name "RULE-MODE")
     (:value :durations)
     (:reactive nil)))
   (:outputs (:output (:name "out") (:reactive nil)))
   (:id 16))
  (:box
   (:type :abstraction)
   (:reference
    (:patch
     (:name "internal-patch")
     (:doc "")
     (:info
      (:created nil)
      (:modified nil)
      (:by *app-name*)
      (:version 0))
     (:window (:size (500 500)) (:position (42 46)))
     (:grid nil)
     (:lock nil)
     (:boxes
      (:box
       (:type :value)
       (:reference symbol)
       (:group-id nil)
       (:name "aux 3")
       (:x 300)
       (:y 168)
       (:w 32)
       (:h 30)
       (:color
        (:color-or-nil
         (:color (:color 1.0 1.0 1.0 1.0))
         (:t-or-nil t)))
       (:border nil)
       (:roundness nil)
       (:text-font nil)
       (:align nil)
       (:lock nil)
       (:inputs)
       (:outputs (:output (:name "value") (:reactive nil)))
       (:value t)
       (:id 0))
      (:box
       (:type :function)
       (:reference om=)
       (:group-id nil)
       (:name "om=")
       (:x 214)
       (:y 162)
       (:w 64)
       (:h 29)
       (:color nil)
       (:border nil)
       (:roundness nil)
       (:text-font nil)
       (:align nil)
       (:icon :left)
       (:lock nil)
       (:lambda nil)
       (:inputs
        (:input
         (:type :standard)
         (:name "NUM1")
         (:value 0)
         (:reactive nil))
        (:input
         (:type :standard)
         (:name "NUM2")
         (:value 0)
         (:reactive nil)))
       (:outputs (:output (:name "out") (:reactive nil)))
       (:id 1))
      (:box
       (:type :value)
       (:reference fixnum)
       (:group-id nil)
       (:name "aux 2")
       (:x 244)
       (:y 117)
       (:w 32)
       (:h 30)
       (:color
        (:color-or-nil
         (:color (:color 1.0 1.0 1.0 1.0))
         (:t-or-nil t)))
       (:border nil)
       (:roundness nil)
       (:text-font nil)
       (:align nil)
       (:lock nil)
       (:inputs)
       (:outputs (:output (:name "value") (:reactive nil)))
       (:value 0)
       (:id 2))
      (:box
       (:type :value)
       (:reference ratio)
       (:group-id nil)
       (:name "aux")
       (:x 170)
       (:y 113)
       (:w 39)
       (:h 30)
       (:color
        (:color-or-nil
         (:color (:color 1.0 1.0 1.0 1.0))
         (:t-or-nil t)))
       (:border nil)
       (:roundness nil)
       (:text-font nil)
       (:align nil)
       (:lock nil)
       (:inputs)
       (:outputs (:output (:name "value") (:reactive nil)))
       (:value 1/4)
       (:id 3))
      (:box
       (:type :function)
       (:reference om=)
       (:group-id nil)
       (:name "om=")
       (:x 144)
       (:y 162)
       (:w 64)
       (:h 29)
       (:color nil)
       (:border nil)
       (:roundness nil)
       (:text-font nil)
       (:align nil)
       (:icon :left)
       (:lock nil)
       (:lambda nil)
       (:inputs
        (:input
         (:type :standard)
         (:name "NUM1")
         (:value 0)
         (:reactive nil))
        (:input
         (:type :standard)
         (:name "NUM2")
         (:value 0)
         (:reactive nil)))
       (:outputs (:output (:name "out") (:reactive nil)))
       (:id 4))
      (:box
       (:type :special)
       (:reference if)
       (:group-id nil)
       (:name "if")
       (:x 136)
       (:y 222)
       (:w 230)
       (:h 29)
       (:color nil)
       (:border nil)
       (:roundness nil)
       (:text-font nil)
       (:align nil)
       (:icon :left)
       (:lock nil)
       (:lambda nil)
       (:inputs
        (:input
         (:type :standard)
         (:name "TEST")
         (:value nil)
         (:reactive nil))
        (:input
         (:type :standard)
         (:name "THEN")
         (:value nil)
         (:reactive nil))
        (:input
         (:type :optional)
         (:name "else")
         (:value nil)
         (:reactive nil)))
       (:outputs (:output (:name "out") (:reactive nil)))
       (:id 5))
      (:box
       (:type :function)
       (:reference second)
       (:group-id nil)
       (:name "second")
       (:x 194)
       (:y 68)
       (:w 76)
       (:h 29)
       (:color nil)
       (:border nil)
       (:roundness nil)
       (:text-font nil)
       (:align nil)
       (:icon :left)
       (:lock nil)
       (:lambda nil)
       (:inputs
        (:input
         (:type :standard)
         (:name "LIST")
         (:value nil)
         (:reactive nil)))
       (:outputs (:output (:name "out") (:reactive nil)))
       (:id 6))
      (:box
       (:type :function)
       (:reference first)
       (:group-id nil)
       (:name "first")
       (:x 132)
       (:y 69)
       (:w 59)
       (:h 29)
       (:color nil)
       (:border nil)
       (:roundness nil)
       (:text-font nil)
       (:align nil)
       (:icon :left)
       (:lock nil)
       (:lambda nil)
       (:inputs
        (:input
         (:type :standard)
         (:name "LIST")
         (:value nil)
         (:reactive nil)))
       (:outputs (:output (:name "out") (:reactive nil)))
       (:id 7))
      (:box
       (:type :io)
       (:reference
        (:out (:type omout) (:name "output") (:index 1) (:doc nil)))
       (:group-id nil)
       (:name "output")
       (:x 217)
       (:y 288)
       (:w 58)
       (:h 42)
       (:color
        (:color-or-nil
         (:color (:color 1.0 1.0 1.0 0.0))
         (:t-or-nil t)))
       (:border 0)
       (:roundness 0)
       (:text-font nil)
       (:align :center)
       (:icon :top)
       (:inputs
        (:input
         (:type :standard)
         (:name "out-value")
         (:value nil)
         (:reactive nil)))
       (:outputs)
       (:id 8))
      (:box
       (:type :io)
       (:reference
        (:in (:type omin) (:index 1) (:name "input") (:doc "")))
       (:group-id nil)
       (:name "input")
       (:x 171)
       (:y 10)
       (:w 50)
       (:h 42)
       (:color
        (:color-or-nil
         (:color (:color 1.0 1.0 1.0 0.0))
         (:t-or-nil t)))
       (:border 0)
       (:roundness 0)
       (:text-font nil)
       (:align :center)
       (:icon :top)
       (:inputs)
       (:outputs (:output (:name "out") (:reactive nil)))
       (:id 9)))
     (:connections
      (:connection (:from (:box 0 :out 0)) (:to (:box 5 :in 2)))
      (:connection
       (:from (:box 1 :out 0))
       (:to (:box 5 :in 1))
       (:attributes
        (:color (:color 0.0 0.0 1.0 1.0) :style nil :modif nil)))
      (:connection (:from (:box 2 :out 0)) (:to (:box 1 :in 1)))
      (:connection (:from (:box 3 :out 0)) (:to (:box 4 :in 1)))
      (:connection
       (:from (:box 4 :out 0))
       (:to (:box 5 :in 0))
       (:attributes
        (:color (:color 1.0 0.0 0.0 1.0) :style nil :modif nil)))
      (:connection (:from (:box 5 :out 0)) (:to (:box 8 :in 0)))
      (:connection
       (:from (:box 6 :out 0))
       (:to (:box 1 :in 0))
       (:attributes
        (:color (:color 0.0 0.0 1.0 1.0) :style nil :modif nil)))
      (:connection
       (:from (:box 7 :out 0))
       (:to (:box 4 :in 0))
       (:attributes
        (:color (:color 1.0 0.0 0.0 1.0) :style nil :modif nil)))
      (:connection
       (:from (:box 9 :out 0))
       (:to (:box 6 :in 0))
       (:attributes
        (:color (:color 0.0 0.0 1.0 1.0) :style nil :modif nil)))
      (:connection
       (:from (:box 9 :out 0))
       (:to (:box 7 :in 0))
       (:attributes
        (:color (:color 1.0 0.0 0.0 1.0) :style nil :modif nil))))))
   (:group-id nil)
   (:name "internal-patch")
   (:x 527)
   (:y 45)
   (:w 115)
   (:h 48)
   (:color nil)
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align :center)
   (:display :hidden)
   (:lock nil)
   (:lambda :lambda)
   (:pre-delay 0)
   (:inputs
    (:input
     (:type :standard)
     (:name "input")
     (:value nil)
     (:reactive nil)))
   (:outputs (:output (:name "output") (:reactive nil)))
   (:id 17))
  (:box
   (:type :value)
   (:reference fixnum)
   (:group-id nil)
   (:name "aux 3")
   (:x 642)
   (:y 102)
   (:w 32)
   (:h 30)
   (:color
    (:color-or-nil (:color (:color 1.0 1.0 1.0 1.0)) (:t-or-nil t)))
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align nil)
   (:lock nil)
   (:inputs)
   (:outputs (:output (:name "value") (:reactive nil)))
   (:value 0)
   (:id 18))
  (:comment
   (:x 34)
   (:y 40)
   (:w 468)
   (:h 278)
   (:fgcolor (:color 0 0 0 1.0))
   (:bgcolor nil)
   (:border 0)
   (:roundness nil)
   (:text-font (:font (:face "Verdana") (:size 12) (:style :plain)))
   (:align nil)
   (:text
    "RULES ONE VOICE 8

METRIC RULES (cont.)

This example patch uses the rnote-meter rule applicator (compare to the previous patch that uses the rmeter-note). The rnote-meter constrains how the metric beat structure relates to notes. It will check every note in the voice. Optionally the rule can ignore rests.
 
The rule in the example patch checks if the duration is a quarter note, and if that is the case, it will only allow the quarter note if its starting point coinside with the beat (i.e. quarter notes can never be syncopated). If the duration is not a quarter note, the rule will always be true.

The rnote-meter has four different input modes that can be selected with the menu in the third input. The three first modes constrain the metric structure in relation to durations, while the fourth also include the pitch of the duration.")
   (:id 19)))
 (:connections
  (:connection (:from (:box 0 :out 0)) (:to (:box 13 :in 0)))
  (:connection (:from (:box 1 :out 0)) (:to (:box 0 :in 4)))
  (:connection (:from (:box 2 :out 0)) (:to (:box 0 :in 3)))
  (:connection (:from (:box 3 :out 0)) (:to (:box 0 :in 2)))
  (:connection (:from (:box 5 :out 0)) (:to (:box 7 :in 1)))
  (:connection (:from (:box 6 :out 0)) (:to (:box 7 :in 0)))
  (:connection (:from (:box 7 :out 0)) (:to (:box 12 :in 8)))
  (:connection (:from (:box 8 :out 0)) (:to (:box 5 :in 0)))
  (:connection (:from (:box 9 :out 0)) (:to (:box 5 :in 1)))
  (:connection (:from (:box 10 :out 0)) (:to (:box 5 :in 2)))
  (:connection (:from (:box 11 :out 0)) (:to (:box 12 :in 7)))
  (:connection (:from (:box 12 :out 0)) (:to (:box 4 :in 1)))
  (:connection (:from (:box 13 :out 0)) (:to (:box 12 :in 3)))
  (:connection (:from (:box 14 :out 0)) (:to (:box 16 :in 1)))
  (:connection (:from (:box 15 :out 0)) (:to (:box 16 :in 0)))
  (:connection (:from (:box 16 :out 0)) (:to (:box 13 :in 1)))
  (:connection (:from (:box 17 :out 0)) (:to (:box 0 :in 0)))
  (:connection (:from (:box 18 :out 0)) (:to (:box 0 :in 1)))))