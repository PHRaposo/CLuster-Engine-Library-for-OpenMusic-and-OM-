
(:patch
 (:name "007b-metric-rules-one-voice")
 (:doc "")
 (:info
  (:created "2021/07/12 22:40:22")
  (:modified "2021/07/12 22:40:53")
  (:by "om-sharp")
  (:version 1.03))
 (:window (:size (1276 659)) (:position (63 87)))
 (:grid nil)
 (:lock nil)
 (:boxes
  (:box
   (:type :value)
   (:reference symbol)
   (:group-id nil)
   (:name "aux 8")
   (:x 659)
   (:y 69)
   (:w 82)
   (:h 30)
   (:color
    (:color-or-nil (:color (:color 1.0 1.0 1.0 1.0)) (:t-or-nil t)))
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align nil)
   (:lock nil)
   (:inputs)
   (:outputs (:output (:name "value") (:reactive nil)))
   (:value :offset_dur)
   (:id 0))
  (:box
   (:type :value)
   (:reference symbol)
   (:group-id nil)
   (:name "aux 7")
   (:x 620)
   (:y 40)
   (:w 71)
   (:h 30)
   (:color
    (:color-or-nil (:color (:color 1.0 1.0 1.0 1.0)) (:t-or-nil t)))
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align nil)
   (:lock nil)
   (:inputs)
   (:outputs (:output (:name "value") (:reactive nil)))
   (:value :1st-beat)
   (:id 1))
  (:comment
   (:x 21)
   (:y 35)
   (:w 445)
   (:h 503)
   (:fgcolor (:color 0 0 0 1.0))
   (:bgcolor nil)
   (:border 0)
   (:roundness nil)
   (:text-font (:font (:face "Verdana") (:size 12) (:style :plain)))
   (:align nil)
   (:text
    "RULES ONE VOICE 7

METRIC RULES (cont.)

The rmeter-note constrains the relation between the meter and notes: It will constrain notes that are positioned at metric beats (i.e. notes that start at the beat, or notes that are sustained over the position of the beat). Notes that are not positioned at beats will be ignored by the rule. Compare the rmeter-note function to how the rnote-meter works (see next tutorial).

The rmeter-note function in the example patch is set to only restrict the first beat in each measure (the setting :1st-beat). The rule will restrict the first event in every measure to be a quarter note starting at the beat.

In the fourth input on the function there is a menu that allow the user to select between six different input modes. The first two and the last two options are for constraining durations that coinside with beats. The middle two modes are for constraining durations AND THEIR 
PITCHES that coinside with beats. If the rule is not dependent on pitch, those two modes should not be used (it would slow down the search process).

In the example patch, the input mode is :offset_dur. In this mode, the rule will constrain durations that coinside with beats. The pitch of the event will be ignored. The rmeter-note function will pass a list with the format '(offset duration) to the internal patch. Offset is the distance between the current beat position and the starting point of the duration. If the offset is 0, it means that the starting point coinsides with the beat position. If the duration starts before and sustains over the beat position, the offset will be the negative distance between the starting poit of the duration and the beat.")
   (:id 2))
  (:box
   (:type :value)
   (:reference fixnum)
   (:group-id nil)
   (:name "aux 6")
   (:x 618)
   (:y 66)
   (:w 32)
   (:h 30)
   (:color
    (:color-or-nil (:color (:color 1.0 1.0 1.0 1.0)) (:t-or-nil t)))
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align nil)
   (:lock nil)
   (:inputs)
   (:outputs (:output (:name "value") (:reactive nil)))
   (:value 0)
   (:id 3))
  (:box
   (:library "Cluster-Engine")
   (:type :function)
   (:reference (:symbol "RMETER-NOTE" "CLUSTER-ENGINE"))
   (:group-id nil)
   (:name "rmeter-note")
   (:x 618)
   (:y 119)
   (:w 104)
   (:h 29)
   (:color nil)
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align nil)
   (:icon :left)
   (:lock nil)
   (:lambda nil)
   (:inputs
    (:input
     (:type :standard)
     (:name "RULE")
     (:value nil)
     (:reactive nil))
    (:input
     (:type :standard)
     (:name "VOICES")
     (:value 0)
     (:reactive nil))
    (:input
     (:type :standard)
     (:name "METRIC-STRUCTURE")
     (:value :1st-beat)
     (:reactive nil))
    (:input
     (:type :standard)
     (:name "INPUT-MODE1")
     (:value :offset_dur)
     (:reactive nil))
    (:input
     (:type :standard)
     (:name "INPUT-MODE2")
     (:value :norm)
     (:reactive nil)))
   (:outputs (:output (:name "out") (:reactive nil)))
   (:id 4))
  (:box
   (:type :abstraction)
   (:reference
    (:patch
     (:name "internal-patch")
     (:doc "")
     (:info
      (:created nil)
      (:modified nil)
      (:by *app-name*)
      (:version 0))
     (:window (:size (500 500)) (:position (84 115)))
     (:grid nil)
     (:lock nil)
     (:boxes
      (:box
       (:type :value)
       (:reference cons)
       (:group-id nil)
       (:name "aux")
       (:x 201)
       (:y 53)
       (:w 60)
       (:h 30)
       (:color
        (:color-or-nil
         (:color (:color 1.0 1.0 1.0 1.0))
         (:t-or-nil t)))
       (:border nil)
       (:roundness nil)
       (:text-font nil)
       (:align nil)
       (:lock nil)
       (:inputs)
       (:outputs (:output (:name "value") (:reactive nil)))
       (:value (:list 0 1/4))
       (:id 0))
      (:box
       (:type :function)
       (:reference equal)
       (:group-id nil)
       (:name "equal")
       (:x 178)
       (:y 135)
       (:w 67)
       (:h 29)
       (:color nil)
       (:border nil)
       (:roundness nil)
       (:text-font nil)
       (:align nil)
       (:icon :left)
       (:lock nil)
       (:lambda nil)
       (:inputs
        (:input
         (:type :standard)
         (:name "X")
         (:value nil)
         (:reactive nil))
        (:input
         (:type :standard)
         (:name "Y")
         (:value nil)
         (:reactive nil)))
       (:outputs (:output (:name "out") (:reactive nil)))
       (:id 1))
      (:box
       (:type :io)
       (:reference
        (:out (:type omout) (:name "output") (:index 1) (:doc nil)))
       (:group-id nil)
       (:name "output")
       (:x 173)
       (:y 227)
       (:w 58)
       (:h 42)
       (:color
        (:color-or-nil
         (:color (:color 1.0 1.0 1.0 0.0))
         (:t-or-nil t)))
       (:border 0)
       (:roundness 0)
       (:text-font nil)
       (:align :center)
       (:icon :top)
       (:inputs
        (:input
         (:type :standard)
         (:name "out-value")
         (:value nil)
         (:reactive nil)))
       (:outputs)
       (:id 2))
      (:box
       (:type :io)
       (:reference
        (:in (:type omin) (:index 1) (:name "input") (:doc "")))
       (:group-id nil)
       (:name "input")
       (:x 131)
       (:y 25)
       (:w 50)
       (:h 42)
       (:color
        (:color-or-nil
         (:color (:color 1.0 1.0 1.0 0.0))
         (:t-or-nil t)))
       (:border 0)
       (:roundness 0)
       (:text-font nil)
       (:align :center)
       (:icon :top)
       (:inputs)
       (:outputs (:output (:name "out") (:reactive nil)))
       (:id 3)))
     (:connections
      (:connection (:from (:box 0 :out 0)) (:to (:box 1 :in 1)))
      (:connection (:from (:box 1 :out 0)) (:to (:box 2 :in 0)))
      (:connection (:from (:box 3 :out 0)) (:to (:box 1 :in 0))))))
   (:group-id nil)
   (:name "internal-patch")
   (:x 494)
   (:y 27)
   (:w 115)
   (:h 48)
   (:color nil)
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align :center)
   (:display :hidden)
   (:lock nil)
   (:lambda :lambda)
   (:pre-delay 0)
   (:inputs
    (:input
     (:type :standard)
     (:name "input")
     (:value nil)
     (:reactive nil)))
   (:outputs (:output (:name "output") (:reactive nil)))
   (:id 5))
  (:box
   (:library "Cluster-Engine")
   (:type :function)
   (:reference (:symbol "RMETRIC-HIERARCHY" "CLUSTER-ENGINE"))
   (:group-id nil)
   (:name "rmetric-hierarchy")
   (:x 757)
   (:y 118)
   (:w 132)
   (:h 29)
   (:color nil)
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align nil)
   (:icon :left)
   (:lock nil)
   (:lambda nil)
   (:inputs
    (:input
     (:type :standard)
     (:name "VOICES")
     (:value 0)
     (:reactive nil))
    (:input
     (:type :standard)
     (:name "RULE-MODE")
     (:value :durations)
     (:reactive nil)))
   (:outputs (:output (:name "out") (:reactive nil)))
   (:id 6))
  (:box
   (:type :value)
   (:reference fixnum)
   (:group-id nil)
   (:name "aux 5")
   (:x 763)
   (:y 85)
   (:w 32)
   (:h 30)
   (:color
    (:color-or-nil (:color (:color 1.0 1.0 1.0 1.0)) (:t-or-nil t)))
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align nil)
   (:lock nil)
   (:inputs)
   (:outputs (:output (:name "value") (:reactive nil)))
   (:value 0)
   (:id 7))
  (:box
   (:type :value)
   (:reference symbol)
   (:group-id nil)
   (:name "aux 4")
   (:x 809)
   (:y 85)
   (:w 77)
   (:h 30)
   (:color
    (:color-or-nil (:color (:color 1.0 1.0 1.0 1.0)) (:t-or-nil t)))
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align nil)
   (:lock nil)
   (:inputs)
   (:outputs (:output (:name "value") (:reactive nil)))
   (:value :durations)
   (:id 8))
  (:box
   (:library "Cluster-Engine")
   (:type :function)
   (:reference (:symbol "RULES-TO-CLUSTER" "CLUSTER-ENGINE"))
   (:group-id nil)
   (:name "rules-to-cluster")
   (:x 688)
   (:y 221)
   (:w 124)
   (:h 29)
   (:color nil)
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align nil)
   (:icon :left)
   (:lock nil)
   (:lambda nil)
   (:inputs
    (:input
     (:type :optional)
     (:name "rules?")
     (:value nil)
     (:reactive nil))
    (:input
     (:type :optional)
     (:name "rules?")
     (:value nil)
     (:reactive nil)))
   (:outputs (:output (:name "out") (:reactive nil)))
   (:id 9))
  (:box
   (:library "Cluster-Engine")
   (:type :function)
   (:reference (:symbol "CLUSTER-ENGINE" "CLUSTER-ENGINE"))
   (:group-id nil)
   (:name "cluster-engine")
   (:x 792)
   (:y 324)
   (:w 116)
   (:h 29)
   (:color nil)
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align nil)
   (:icon :left)
   (:lock nil)
   (:lambda nil)
   (:inputs
    (:input
     (:type :standard)
     (:name "NO-OF-VARIABLES")
     (:value 21)
     (:reactive nil))
    (:input
     (:type :standard)
     (:name "RND?")
     (:value t)
     (:reactive nil))
    (:input
     (:type :standard)
     (:name "DEBUG?")
     (:value nil)
     (:reactive nil))
    (:input
     (:type :standard)
     (:name "RULES")
     (:value nil)
     (:reactive nil))
    (:input
     (:type :standard)
     (:name "TEMPO")
     (:value 90)
     (:reactive nil))
    (:input
     (:type :standard)
     (:name "OUTPUT")
     (:value :voices)
     (:reactive nil))
    (:input
     (:type :standard)
     (:name "METRIC-DOMAIN")
     (:value (:list (:list 4 4)))
     (:reactive nil))
    (:input
     (:type :standard)
     (:name "RHYTHMDOMAIN0")
     (:value (:list (:list 1/4)))
     (:reactive nil))
    (:input
     (:type :standard)
     (:name "PITCHDOMAIN0")
     (:value nil)
     (:reactive nil)))
   (:outputs (:output (:name "out") (:reactive nil)))
   (:id 10))
  (:box
   (:type :value)
   (:reference cons)
   (:group-id nil)
   (:name "list 2")
   (:x 786)
   (:y 244)
   (:w 161)
   (:h 30)
   (:color
    (:color-or-nil (:color (:color 1.0 1.0 1.0 1.0)) (:t-or-nil t)))
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align nil)
   (:lock nil)
   (:inputs)
   (:outputs (:output (:name "value") (:reactive nil)))
   (:value (:list (:list 1/12) (:list 1/16) (:list 1/8) (:list 1/4)))
   (:id 11))
  (:box
   (:type :value)
   (:reference fixnum)
   (:group-id nil)
   (:name "aux 3")
   (:x 1065)
   (:y 109)
   (:w 32)
   (:h 29)
   (:color
    (:color-or-nil (:color (:color 1.0 1.0 1.0 1.0)) (:t-or-nil t)))
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align nil)
   (:lock nil)
   (:inputs)
   (:outputs (:output (:name "value") (:reactive nil)))
   (:value 100)
   (:id 12))
  (:box
   (:type :value)
   (:reference fixnum)
   (:group-id nil)
   (:name "aux 2")
   (:x 1009)
   (:y 89)
   (:w 48)
   (:h 30)
   (:color
    (:color-or-nil (:color (:color 1.0 1.0 1.0 1.0)) (:t-or-nil t)))
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align nil)
   (:lock nil)
   (:inputs)
   (:outputs (:output (:name "value") (:reactive nil)))
   (:value 7900)
   (:id 13))
  (:box
   (:type :value)
   (:reference fixnum)
   (:group-id nil)
   (:name "aux")
   (:x 990)
   (:y 119)
   (:w 37)
   (:h 29)
   (:color
    (:color-or-nil (:color (:color 1.0 1.0 1.0 1.0)) (:t-or-nil t)))
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align nil)
   (:lock nil)
   (:inputs)
   (:outputs (:output (:name "value") (:reactive nil)))
   (:value 6000)
   (:id 14))
  (:box
   (:type :function)
   (:reference mapcar)
   (:group-id nil)
   (:name "mapcar")
   (:x 998)
   (:y 255)
   (:w 77)
   (:h 29)
   (:color nil)
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align nil)
   (:icon :left)
   (:lock nil)
   (:lambda nil)
   (:inputs
    (:input
     (:type :standard)
     (:name "FUNCTION")
     (:value nil)
     (:reactive nil))
    (:input
     (:type :standard)
     (:name "LIST")
     (:value nil)
     (:reactive nil)))
   (:outputs (:output (:name "out") (:reactive nil)))
   (:id 15))
  (:box
   (:type :function)
   (:reference list)
   (:group-id nil)
   (:name "list")
   (:x 983)
   (:y 199)
   (:w 54)
   (:h 29)
   (:color nil)
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align nil)
   (:icon :left)
   (:lock nil)
   (:lambda :lambda)
   (:inputs
    (:input
     (:type :optional)
     (:name "x")
     (:value nil)
     (:reactive nil)))
   (:outputs (:output (:name "out") (:reactive nil)))
   (:id 16))
  (:box
   (:type :function)
   (:reference arithm-ser)
   (:group-id nil)
   (:name "arithm-ser")
   (:x 999)
   (:y 148)
   (:w 96)
   (:h 29)
   (:color nil)
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align nil)
   (:icon :left)
   (:lock nil)
   (:lambda nil)
   (:inputs
    (:input
     (:type :standard)
     (:name "BEGIN")
     (:value 6000)
     (:reactive nil))
    (:input
     (:type :standard)
     (:name "END")
     (:value 7900)
     (:reactive nil))
    (:input
     (:type :standard)
     (:name "STEP")
     (:value 100)
     (:reactive nil)))
   (:outputs (:output (:name "out") (:reactive nil)))
   (:id 17))
  (:box
   (:type :object)
   (:reference poly)
   (:group-id nil)
   (:name "POLY")
   (:x 587)
   (:y 433)
   (:w 548)
   (:h 133)
   (:color nil)
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align :center)
   (:display :mini-view)
   (:showname nil)
   (:show-markers t)
   (:lock nil)
   (:lambda nil)
   (:inputs
    (:input
     (:type :standard)
     (:name "SELF")
     (:value nil)
     (:reactive nil))
    (:input
     (:type :standard)
     (:name "OBJ-LIST")
     (:value
      (:list
       (:object
        (:class voice)
        (:slots
         ((:onset 0)
          (:duration 3999)
          (:interpol (:number-or-nil (:number 50) (:t-or-nil nil)))
          (:name nil)
          (:symbolic-date nil)
          (:symbolic-dur nil)
          (:symbolic-dur-extent 0)
          (:extras nil)
          (:group-ids nil)
          (:tree (:list 1 (:list (:list (:list 4 4) (:list 1 1 1 1)))))
          (:lmidic (:list 6000))
          (:lonset (:list 0 1000 2000 3000 4000))
          (:ldur (:list 999))
          (:lvel (:list 100))
          (:loffset (:list 0))
          (:lchan (:list 1))
          (:lport (:list nil))
          (:llegato nil)
          (:tempo 60))))))
     (:reactive nil)))
   (:outputs
    (:output (:name "SELF") (:reactive nil))
    (:output (:name "OBJ-LIST") (:reactive nil)))
   (:window (:size nil) (:position nil))
   (:edition-params
    (:time-map
     (:list
      (:list -1000 0)
      (:list 0 7.5)
      (:list 667 13.0)
      (:list 833 17.425)
      (:list 1333 23.099999)
      (:list 1500 27.974999)
      (:list 1667 32.399998)
      (:list 1833 36.024998)
      (:list 2000 39.649998)
      (:list 2167 43.274998)
      (:list 2333 46.899998)
      (:list 2500 51.324997)
      (:list 2667 60.949997)
      (:list 3333 67.25)
      (:list 4000 72.75)
      (:list 4167 77.175)
      (:list 4333 81.600006)
      (:list 4667 85.850006)
      (:list 4889 90.483345)
      (:list 5111 95.116684)
      (:list 5333 104.95002)
      (:list 6000 110.45002)
      (:list 6167 114.07502)
      (:list 6500 119.12502)
      (:list 6667 123.550026)
      (:list 6833 126.675026)
      (:list 7333 131.55002))))
   (:value
    (:object
     (:class poly)
     (:slots
      ((:chord-seqs
        (:list
         (:object
          (:class voice)
          (:slots
           ((:onset 0)
            (:duration 6832)
            (:interpol (:number-or-nil (:number 50) (:t-or-nil nil)))
            (:name nil)
            (:symbolic-date nil)
            (:symbolic-dur nil)
            (:symbolic-dur-extent 0)
            (:extras nil)
            (:group-ids nil)
            (:tree
             (:list
              3
              (:list
               (:list
                (:list 4 4)
                (:list
                 1
                 (:list 1 (:list 1 3))
                 (:list 1 (:list 1.0 1 1 1))
                 (:list 1 (:list 1.0 1 1 1))))
               (:list
                (:list 4 4)
                (:list
                 1
                 1
                 (:list 1 (:list 1 1 2))
                 (:list 1 (:list 1 1 1))))
               (:list
                (:list 4 4)
                (:list
                 1
                 (:list 1 (:list 1 2 1))
                 (:list 1 (:list 1.0 -3))
                 -1)))))
            (:lmidic
             (:list
              (:list 6200)
              (:list 7700)
              (:list 6100)
              (:list 6800)
              (:list 7800)
              (:list 7600)
              (:list 6700)
              (:list 6900)
              (:list 7500)
              (:list 6000)
              (:list 7300)
              (:list 7400)
              (:list 6100)
              (:list 6100)
              (:list 6800)
              (:list 6100)
              (:list 7800)
              (:list 7900)
              (:list 6800)
              (:list 6900)
              (:list 6300)))
            (:lonset
             (:list
              0
              667
              833
              1500
              1667
              1833
              2167
              2333
              2500
              2667
              3333
              4000
              4167
              4333
              4667
              4889
              5111
              5333
              6000
              6167
              6500
              8000))
            (:ldur
             (:list
              (:list 666)
              (:list 165)
              (:list 666)
              (:list 166)
              (:list 165)
              (:list 333)
              (:list 165)
              (:list 166)
              (:list 166)
              (:list 665)
              (:list 666)
              (:list 166)
              (:list 165)
              (:list 333)
              (:list 221)
              (:list 221)
              (:list 221)
              (:list 666)
              (:list 166)
              (:list 332)
              (:list 332)))
            (:lvel (:list 100))
            (:loffset (:list 0))
            (:lchan (:list 1))
            (:lport (:list nil))
            (:llegato nil)
            (:tempo 90))))))
       (:symbolic-date nil)
       (:symbolic-dur nil)
       (:symbolic-dur-extent 0)
       (:extras nil)
       (:group-ids nil)))))
   (:id 18)))
 (:connections
  (:connection (:from (:box 0 :out 0)) (:to (:box 4 :in 3)))
  (:connection (:from (:box 1 :out 0)) (:to (:box 4 :in 2)))
  (:connection (:from (:box 3 :out 0)) (:to (:box 4 :in 1)))
  (:connection (:from (:box 4 :out 0)) (:to (:box 9 :in 0)))
  (:connection (:from (:box 5 :out 0)) (:to (:box 4 :in 0)))
  (:connection (:from (:box 6 :out 0)) (:to (:box 9 :in 1)))
  (:connection (:from (:box 7 :out 0)) (:to (:box 6 :in 0)))
  (:connection (:from (:box 8 :out 0)) (:to (:box 6 :in 1)))
  (:connection (:from (:box 9 :out 0)) (:to (:box 10 :in 3)))
  (:connection (:from (:box 10 :out 0)) (:to (:box 18 :in 1)))
  (:connection (:from (:box 11 :out 0)) (:to (:box 10 :in 7)))
  (:connection (:from (:box 12 :out 0)) (:to (:box 17 :in 2)))
  (:connection (:from (:box 13 :out 0)) (:to (:box 17 :in 1)))
  (:connection (:from (:box 14 :out 0)) (:to (:box 17 :in 0)))
  (:connection (:from (:box 15 :out 0)) (:to (:box 10 :in 8)))
  (:connection (:from (:box 16 :out 0)) (:to (:box 15 :in 0)))
  (:connection (:from (:box 17 :out 0)) (:to (:box 15 :in 1)))))