; OM File Header - Saved 2021/07/23 2:03:03
; (6.18 :patc (om-make-point 538.4794921875D0 70) (om-make-point 19 23) (om-make-point 837 516) "" 183 0 "2021/07/06 0:35:53" "2021/07/23 2:03:03")
; End File Header
(in-package :om)(load-lib-for (quote ("Cluster-Engine")))(setf *om-current-persistent* (om-load-patch1 "004-rules" (quote ((let ((box (om-load-boxcall (quote genfun) "RPITCHES-ONE-VOICE" (quote cluster-engine::rpitches-one-voice) (quote ((om-load-inputfun (quote input-funbox) "rule" "RULE" nil) (om-load-inputfun (quote input-funbox) "voice-number" "VOICES" 0) (om-load-inputfunmenu1 (quote input-funmenu) "input-mode" "INPUT-MODE" (quote :pitches) (list (list "pitches" (quote :pitches)) (list "pitch/nth" (quote :pitch/nth)) (list "motifs" (quote :motifs)) (list "motif/nth" (quote :motif/nth)) (list "motif/index" (quote :motif/index)) (list "all-pitches" (quote :all-pitches)))))) (om-make-point 531 146) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 575 90) (om-make-point 27 30) 0 "0" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 7" (quote t) (quote nil) (om-make-point 618 90) (om-make-point 64 30) (quote :pitches) ":pitches" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "internal-patch" (om-load-patch-abs1 "internal-patch" (quote ((let ((box (om-load-boxout "output" 0 (om-make-point 176 279) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM>" (quote om>) (quote ((om-load-inputfun (quote input-funbox) "a number" "NUM1" 0) (om-load-inputfun (quote input-funbox) "a number" "NUM2" 1))) (om-make-point 190 198) (om-make-point 21 35) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "second-input" 1 (om-make-point 118 41) "" "second-input" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "first-input" 0 (om-make-point 230 42) "" "first-input" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((1 0 0 0 nil 0) (2 0 1 0 nil 2) (3 0 1 1 nil 1))) 6.18 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil) (om-load-inputfun (quote input-funbox) "" "input 2" nil))) (om-make-point 470 54) nil (list nil) "l" "internal-patch"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "RCANON" (quote cluster-engine::rcanon) (quote ((om-load-inputfun (quote input-funbox) "list-of-voice-numbers" "VOICES" (list 0 1)) (om-load-inputfunmenu1 (quote input-funmenu) "parameter" "PARAMETER" (quote :rhythm) (list (list "rhythm" (quote :rhythm)) (list "rhythm&pitch" (quote :rhythm&pitch)) (list "pitch" (quote :pitch)))) (om-load-inputfun (quote input-funbox) "duration" "OFFSET" 1/2) (om-load-inputfun (quote input-funbox) "pitch-interval" "INTERVAL" 700))) (om-make-point 568 365) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 415 442) (quote "RULES $$A rule is typically built of two boxes: $$1. A rule applicator function that looks into the score the system is building and accesses the score elements that are constrained.$$2. An internal patch that contains the actual constraint. The internal patch should have only one output, that should be $connected to the applicator function. The internal patch needs to be in the lambda mode (select the internal patch and press \"l\").$$The number of inputs on the internal patch reflects the number of consecutive score elements that are related in the the rule restriction. The example rule in the internal patch states that a pitch has to be higher than the preceeding pitch. To create this rule, the internal patch needs two inputs: The rule restriction will compare the two inputs and state that the second one has to be higher than the first (double click on the internal patch to see how this is done).$$$Some rules use only one function. These rules have a predefined concept. An example is the rcanon function, that forces one voice to follow another voice in a canon.") "" (om-make-point 23 40) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((3 0 0 0 nil 0) (1 0 0 1 nil 0) (2 0 0 2 nil 0))) nil 6.18))
