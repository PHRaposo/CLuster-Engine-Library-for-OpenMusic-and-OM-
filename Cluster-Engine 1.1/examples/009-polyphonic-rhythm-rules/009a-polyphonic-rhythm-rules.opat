
(:patch
 (:name "009a-polyphonic-rhythm-rules")
 (:doc "")
 (:info
  (:created "2021/07/12 22:58:54")
  (:modified "2021/07/12 22:59:34")
  (:by "om-sharp")
  (:version 1.03))
 (:window (:size (1115 543)) (:position (84 115)))
 (:grid nil)
 (:lock nil)
 (:boxes
  (:box
   (:type :value)
   (:reference fixnum)
   (:group-id nil)
   (:name "aux 6")
   (:x 600)
   (:y 169)
   (:w 34)
   (:h 30)
   (:color
    (:color-or-nil (:color (:color 1.0 1.0 1.0 1.0)) (:t-or-nil t)))
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align nil)
   (:lock nil)
   (:inputs)
   (:outputs (:output (:name "value") (:reactive nil)))
   (:value 15)
   (:id 0))
  (:box
   (:type :object)
   (:reference poly)
   (:group-id nil)
   (:name "POLY")
   (:x 496)
   (:y 288)
   (:w 547)
   (:h 198)
   (:color nil)
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align :center)
   (:display :mini-view)
   (:showname nil)
   (:show-markers t)
   (:lock nil)
   (:lambda nil)
   (:inputs
    (:input
     (:type :standard)
     (:name "SELF")
     (:value nil)
     (:reactive nil))
    (:input
     (:type :standard)
     (:name "OBJ-LIST")
     (:value
      (:list
       (:object
        (:class voice)
        (:slots
         ((:onset 0)
          (:duration 3999)
          (:interpol (:number-or-nil (:number 50) (:t-or-nil nil)))
          (:name nil)
          (:symbolic-date nil)
          (:symbolic-dur nil)
          (:symbolic-dur-extent 0)
          (:extras nil)
          (:group-ids nil)
          (:tree (:list 1 (:list (:list (:list 4 4) (:list 1 1 1 1)))))
          (:lmidic (:list 6000))
          (:lonset (:list 0 1000 2000 3000 4000))
          (:ldur (:list 999))
          (:lvel (:list 100))
          (:loffset (:list 0))
          (:lchan (:list 1))
          (:lport (:list nil))
          (:llegato nil)
          (:tempo 60))))))
     (:reactive nil)))
   (:outputs
    (:output (:name "SELF") (:reactive nil))
    (:output (:name "OBJ-LIST") (:reactive nil)))
   (:window (:size nil) (:position nil))
   (:edition-params
    (:time-map
     (:list
      (:list -1000 0)
      (:list 0 7.5)
      (:list 333 11.75)
      (:list 500 16.0)
      (:list 667 19.625)
      (:list 1000 23.875)
      (:list 1333 28.125)
      (:list 1667 32.375)
      (:list 2000 36.625)
      (:list 2333 40.875)
      (:list 2500 45.125)
      (:list 2667 54.75)
      (:list 3000 59.0)
      (:list 3333 63.25)
      (:list 3500 67.5)
      (:list 3667 71.125)
      (:list 4000 75.375)
      (:list 4333 79.625)
      (:list 4667 83.875)
      (:list 5000 88.125)
      (:list 5333 98.375)
      (:list 5667 111.375)
      (:list 6000 115.625))))
   (:value
    (:object
     (:class poly)
     (:slots
      ((:chord-seqs
        (:list
         (:object
          (:class voice)
          (:slots
           ((:onset 0)
            (:duration 5666)
            (:interpol (:number-or-nil (:number 50) (:t-or-nil nil)))
            (:name nil)
            (:symbolic-date nil)
            (:symbolic-dur nil)
            (:symbolic-dur-extent 0)
            (:extras nil)
            (:group-ids nil)
            (:tree
             (:list
              3
              (:list
               (:list
                (:list 4 4)
                (:list
                 (:list 1 (:list 1 1))
                 (:list 1 (:list 1.0 1))
                 1.0
                 (:list 1 (:list 1.0 1))))
               (:list
                (:list 4 4)
                (:list
                 (:list 1 (:list 1 1))
                 1.0
                 (:list 1 (:list 1.0 1))
                 1.0))
               (:list
                (:list 4 4)
                (:list (:list 1 (:list 1.0 -1)) -3)))))
            (:lmidic (:list 7200))
            (:lonset (:list 0 333 1000 2333 2667 3000 4333 8000))
            (:ldur
             (:list
              (:list 332)
              (:list 666)
              (:list 1332)
              (:list 333)
              (:list 332)
              (:list 1332)
              (:list 1333)))
            (:lvel (:list 100))
            (:loffset (:list 0))
            (:lchan (:list 1))
            (:lport (:list nil))
            (:llegato nil)
            (:tempo 90))))
         (:object
          (:class voice)
          (:slots
           ((:onset 0)
            (:duration 5666)
            (:interpol (:number-or-nil (:number 50) (:t-or-nil nil)))
            (:name nil)
            (:symbolic-date nil)
            (:symbolic-dur nil)
            (:symbolic-dur-extent 0)
            (:extras nil)
            (:group-ids nil)
            (:tree
             (:list
              3
              (:list
               (:list
                (:list 4 4)
                (:list
                 (:list 1 (:list 1 1))
                 (:list 1 (:list 1 1))
                 (:list 1 (:list 1.0 1))
                 (:list 1 (:list 1.0 1))))
               (:list
                (:list 4 4)
                (:list
                 (:list 1 (:list 1 1))
                 (:list 1 (:list 1.0 1))
                 (:list 1 (:list 1.0 1))
                 (:list 1 (:list 1.0 1))))
               (:list (:list 4 4) (:list (:list 1 (:list 1 -1)) -3)))))
            (:lmidic (:list 6700))
            (:lonset
             (:list
              0
              333
              667
              1000
              1667
              2333
              2667
              3000
              3667
              4333
              5000
              5333
              8000))
            (:ldur
             (:list
              (:list 332)
              (:list 333)
              (:list 332)
              (:list 666)
              (:list 665)
              (:list 333)
              (:list 332)
              (:list 666)
              (:list 665)
              (:list 666)
              (:list 332)
              (:list 333)))
            (:lvel (:list 100))
            (:loffset (:list 0))
            (:lchan (:list 1))
            (:lport (:list nil))
            (:llegato nil)
            (:tempo 90))))
         (:object
          (:class voice)
          (:slots
           ((:onset 0)
            (:duration 5332)
            (:interpol (:number-or-nil (:number 50) (:t-or-nil nil)))
            (:name nil)
            (:symbolic-date nil)
            (:symbolic-dur nil)
            (:symbolic-dur-extent 0)
            (:extras nil)
            (:group-ids nil)
            (:tree
             (:list
              3
              (:list
               (:list
                (:list 4 4)
                (:list
                 (:list 1 (:list 2 1 1))
                 (:list 1 (:list 1 1))
                 (:list 1 (:list 1.0 1))
                 (:list 1 (:list 2.0 1 1))))
               (:list
                (:list 4 4)
                (:list
                 (:list 1 (:list 1 1))
                 (:list 1 (:list 1 1 2))
                 (:list 1 (:list 1.0 1))
                 (:list 1 (:list 1.0 1))))
               (:list (:list 4 4) (:list -4)))))
            (:lmidic (:list 6000))
            (:lonset
             (:list
              0
              333
              500
              667
              1000
              1667
              2333
              2500
              2667
              3000
              3333
              3500
              3667
              4333
              5000
              8000))
            (:ldur
             (:list
              (:list 332)
              (:list 166)
              (:list 166)
              (:list 332)
              (:list 666)
              (:list 665)
              (:list 166)
              (:list 166)
              (:list 332)
              (:list 332)
              (:list 166)
              (:list 166)
              (:list 665)
              (:list 666)
              (:list 332)))
            (:lvel (:list 100))
            (:loffset (:list 0))
            (:lchan (:list 1))
            (:lport (:list nil))
            (:llegato nil)
            (:tempo 90))))))
       (:symbolic-date nil)
       (:symbolic-dur nil)
       (:symbolic-dur-extent 0)
       (:extras nil)
       (:group-ids nil)))))
   (:id 1))
  (:box
   (:type :value)
   (:reference cons)
   (:group-id nil)
   (:name "aux 5")
   (:x 757)
   (:y 151)
   (:w 132)
   (:h 30)
   (:color
    (:color-or-nil (:color (:color 1.0 1.0 1.0 1.0)) (:t-or-nil t)))
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align nil)
   (:lock nil)
   (:inputs)
   (:outputs (:output (:name "value") (:reactive nil)))
   (:value (:list (:list 1/4) (:list 1/8) (:list 1/16)))
   (:id 2))
  (:box
   (:type :value)
   (:reference cons)
   (:group-id nil)
   (:name "aux 4")
   (:x 696)
   (:y 123)
   (:w 92)
   (:h 30)
   (:color
    (:color-or-nil (:color (:color 1.0 1.0 1.0 1.0)) (:t-or-nil t)))
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align nil)
   (:lock nil)
   (:inputs)
   (:outputs (:output (:name "value") (:reactive nil)))
   (:value (:list (:list 1/4) (:list 1/8)))
   (:id 3))
  (:box
   (:type :value)
   (:reference cons)
   (:group-id nil)
   (:name "aux 3")
   (:x 619)
   (:y 96)
   (:w 125)
   (:h 30)
   (:color
    (:color-or-nil (:color (:color 1.0 1.0 1.0 1.0)) (:t-or-nil t)))
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align nil)
   (:lock nil)
   (:inputs)
   (:outputs (:output (:name "value") (:reactive nil)))
   (:value (:list (:list 1/2) (:list 1/4) (:list 1/8)))
   (:id 4))
  (:box
   (:library "Cluster-Engine")
   (:type :function)
   (:reference (:symbol "CLUSTER-ENGINE" "CLUSTER-ENGINE"))
   (:group-id nil)
   (:name "cluster-engine")
   (:x 607)
   (:y 204)
   (:w 140)
   (:h 29)
   (:color nil)
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align nil)
   (:icon :left)
   (:lock nil)
   (:lambda nil)
   (:inputs
    (:input
     (:type :standard)
     (:name "NO-OF-VARIABLES")
     (:value 15)
     (:reactive nil))
    (:input
     (:type :standard)
     (:name "RND?")
     (:value t)
     (:reactive nil))
    (:input
     (:type :standard)
     (:name "DEBUG?")
     (:value nil)
     (:reactive nil))
    (:input
     (:type :standard)
     (:name "RULES")
     (:value nil)
     (:reactive nil))
    (:input
     (:type :standard)
     (:name "TEMPO")
     (:value 90)
     (:reactive nil))
    (:input
     (:type :standard)
     (:name "OUTPUT")
     (:value :voices)
     (:reactive nil))
    (:input
     (:type :standard)
     (:name "METRIC-DOMAIN")
     (:value (:list (:list 4 4)))
     (:reactive nil))
    (:input
     (:type :standard)
     (:name "RHYTHMDOMAIN0")
     (:value (:list (:list 1/4)))
     (:reactive nil))
    (:input
     (:type :standard)
     (:name "PITCHDOMAIN0")
     (:value (:list (:list 7200)))
     (:reactive nil))
    (:input
     (:type :optional)
     (:name "rhythmdomain1")
     (:value nil)
     (:reactive nil))
    (:input
     (:type :optional)
     (:name "pitchdomain1")
     (:value (:list (:list 6700)))
     (:reactive nil))
    (:input
     (:type :optional)
     (:name "rhythmdomain2")
     (:value nil)
     (:reactive nil))
    (:input
     (:type :optional)
     (:name "pitchdomain2")
     (:value (:list (:list 6000)))
     (:reactive nil)))
   (:outputs (:output (:name "out") (:reactive nil)))
   (:id 5))
  (:box
   (:type :value)
   (:reference symbol)
   (:group-id nil)
   (:name "aux 2")
   (:x 547)
   (:y 20)
   (:w 76)
   (:h 30)
   (:color
    (:color-or-nil (:color (:color 1.0 1.0 1.0 1.0)) (:t-or-nil t)))
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align nil)
   (:lock nil)
   (:inputs)
   (:outputs (:output (:name "value") (:reactive nil)))
   (:value :dur->dur)
   (:id 6))
  (:box
   (:type :value)
   (:reference cons)
   (:group-id nil)
   (:name "aux")
   (:x 466)
   (:y 21)
   (:w 59)
   (:h 30)
   (:color
    (:color-or-nil (:color (:color 1.0 1.0 1.0 1.0)) (:t-or-nil t)))
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align nil)
   (:lock nil)
   (:inputs)
   (:outputs (:output (:name "value") (:reactive nil)))
   (:value (:list 0 1 2))
   (:id 7))
  (:box
   (:library "Cluster-Engine")
   (:type :function)
   (:reference (:symbol "RRHYTHM-HIERARCHY" "CLUSTER-ENGINE"))
   (:group-id nil)
   (:name "rrhythm-hierarchy")
   (:x 495)
   (:y 66)
   (:w 137)
   (:h 29)
   (:color nil)
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align nil)
   (:icon :left)
   (:lock nil)
   (:lambda nil)
   (:inputs
    (:input
     (:type :standard)
     (:name "VOICES")
     (:value (:list 1))
     (:reactive nil))
    (:input
     (:type :standard)
     (:name "RULE-MODE")
     (:value :dur->dur)
     (:reactive nil)))
   (:outputs (:output (:name "out") (:reactive nil)))
   (:id 8))
  (:comment
   (:x 11)
   (:y 33)
   (:w 422)
   (:h 458)
   (:fgcolor (:color 0 0 0 1.0))
   (:bgcolor nil)
   (:border 0)
   (:roundness nil)
   (:text-font (:font (:face "Verdana") (:size 12) (:style :plain)))
   (:align nil)
   (:text
    "POLYPHONIC RHYTHM RULES 1

The rrhythm-hierarchy will create an hierarchical relation between events in different voices. In a hierarchical rhythmic relationship, one voice contains the basic events and a second voice contains more rhythmic details (it can be thought of as more ornamental details). The second voice will automatically include the basic events from the first voice. 

In the example patch, the rrhythm-hierarchy is set to create a hierarchic relation between the first and second voice, and between the second and third voice (the setting '(0 1 2) ). 

In the example, you can see in the solution in the poly object that every onset in the first voice exist as an onset in the second voice. You will also find a few extra onsets in the second voice. You can further see that every onset in the second voice exist as an onset in the third voice, and that there are a few extra onsets in the third voice as well.

Note that the rrhythm-hierarchy also accepts sublists with independent rhythmic hierarchical relations such as '((0 1)(2 3)). Even though '(0 1 2) would result with the same solution as 
'((0 1) (1 2)), it is if possible not recommended to break up the hierarchy into two sublists: the engine would not be able to search as efficient (the speed difference can be big).

In this example, the rrhythm-hierarchy will break down the constraint into three rules to optimize search efficiency (the user will not need to be aware of this).")
   (:id 9)))
 (:connections
  (:connection (:from (:box 0 :out 0)) (:to (:box 5 :in 0)))
  (:connection (:from (:box 2 :out 0)) (:to (:box 5 :in 11)))
  (:connection (:from (:box 3 :out 0)) (:to (:box 5 :in 9)))
  (:connection (:from (:box 4 :out 0)) (:to (:box 5 :in 7)))
  (:connection (:from (:box 5 :out 0)) (:to (:box 1 :in 1)))
  (:connection (:from (:box 6 :out 0)) (:to (:box 8 :in 1)))
  (:connection (:from (:box 7 :out 0)) (:to (:box 8 :in 0)))
  (:connection (:from (:box 8 :out 0)) (:to (:box 5 :in 3)))))