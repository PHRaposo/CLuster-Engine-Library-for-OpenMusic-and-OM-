
(:patch
 (:name "005b-index-rules-one-engine2")
 (:doc "")
 (:info
  (:created "2021/07/10 15:15:27")
  (:modified "2021/07/12 18:44:10")
  (:by "om-sharp")
  (:version 1.03))
 (:window (:size (1292 539)) (:position (68 207)))
 (:grid nil)
 (:lock nil)
 (:boxes
  (:box
   (:type :object)
   (:reference poly)
   (:group-id nil)
   (:name "POLY")
   (:x 706)
   (:y 410)
   (:w 501)
   (:h 95)
   (:color nil)
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align :center)
   (:display :mini-view)
   (:showname nil)
   (:show-markers t)
   (:lock nil)
   (:lambda nil)
   (:inputs
    (:input
     (:type :standard)
     (:name "SELF")
     (:value nil)
     (:reactive nil))
    (:input
     (:type :standard)
     (:name "OBJ-LIST")
     (:value
      (:list
       (:object
        (:class voice)
        (:slots
         ((:onset 0)
          (:duration 3999)
          (:interpol (:number-or-nil (:number 50) (:t-or-nil nil)))
          (:name nil)
          (:symbolic-date nil)
          (:symbolic-dur nil)
          (:symbolic-dur-extent 0)
          (:extras nil)
          (:group-ids nil)
          (:tree (:list 1 (:list (:list (:list 4 4) (:list 1 1 1 1)))))
          (:lmidic (:list 6000))
          (:lonset (:list 0 1000 2000 3000 4000))
          (:ldur (:list 999))
          (:lvel (:list 100))
          (:loffset (:list 0))
          (:lchan (:list 1))
          (:lport (:list nil))
          (:llegato nil)
          (:tempo 60))))))
     (:reactive nil)))
   (:outputs
    (:output (:name "SELF") (:reactive nil))
    (:output (:name "OBJ-LIST") (:reactive nil)))
   (:window (:size nil) (:position nil))
   (:edition-params
    (:time-map
     (:list
      (:list -1000 0)
      (:list 0 7.5)
      (:list 667 13.0)
      (:list 1000 18.5)
      (:list 1333 22.75)
      (:list 2000 27.0)
      (:list 2667 38.5)
      (:list 3333 44.0)
      (:list 3667 49.5)
      (:list 3833 53.125)
      (:list 4000 56.75)
      (:list 4167 60.375)
      (:list 4667 65.25)
      (:list 4833 70.125)
      (:list 5333 81.0)
      (:list 5500 85.875)
      (:list 6000 90.75)
      (:list 6500 95.625)
      (:list 6667 99.25)
      (:list 7167 102.875)
      (:list 7333 106.5)
      (:list 8000 116.125)
      (:list 8167 119.25)
      (:list 8667 124.125))))
   (:value
    (:object
     (:class poly)
     (:slots
      ((:chord-seqs
        (:list
         (:object
          (:class voice)
          (:slots
           ((:onset 0)
            (:duration 8166)
            (:interpol (:number-or-nil (:number 50) (:t-or-nil nil)))
            (:name nil)
            (:symbolic-date nil)
            (:symbolic-dur nil)
            (:symbolic-dur-extent 0)
            (:extras nil)
            (:group-ids nil)
            (:tree
             (:list
              4
              (:list
               (:list
                (:list 4 4)
                (:list 1 (:list 1 (:list 1.0 1)) 1.0 1))
               (:list
                (:list 4 4)
                (:list
                 1
                 (:list 1 (:list 2.0 1 1))
                 (:list 1 (:list 1 3))
                 (:list 1 (:list 1.0 3))))
               (:list
                (:list 4 4)
                (:list
                 (:list 1 (:list 1.0 3))
                 (:list 1 (:list 3.0 1))
                 (:list 1 (:list 3.0 1))
                 1.0))
               (:list
                (:list 4 4)
                (:list (:list 1 (:list 1.0 -3)) -3)))))
            (:lmidic
             (:list
              (:list 6600)
              (:list 6800)
              (:list 7100)
              (:list 7000)
              (:list 6400)
              (:list 7200)
              (:list 7200)
              (:list 7000)
              (:list 7200)
              (:list 7100)
              (:list 6400)
              (:list 7000)))
            (:lonset
             (:list
              0
              1000
              2000
              2667
              3667
              3833
              4000
              4167
              4833
              5500
              6500
              7167
              10667))
            (:ldur
             (:list
              (:list 999)
              (:list 999)
              (:list 666)
              (:list 999)
              (:list 165)
              (:list 166)
              (:list 166)
              (:list 665)
              (:list 666)
              (:list 999)
              (:list 666)
              (:list 999)))
            (:lvel (:list 100))
            (:loffset (:list 0))
            (:lchan (:list 1))
            (:lport (:list nil))
            (:llegato nil)
            (:tempo 90))))))
       (:symbolic-date nil)
       (:symbolic-dur nil)
       (:symbolic-dur-extent 0)
       (:extras nil)
       (:group-ids nil)))))
   (:id 0))
  (:box
   (:type :function)
   (:reference mapcar)
   (:group-id nil)
   (:name "mapcar")
   (:x 1068)
   (:y 227)
   (:w 77)
   (:h 29)
   (:color nil)
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align nil)
   (:icon :left)
   (:lock nil)
   (:lambda nil)
   (:inputs
    (:input
     (:type :standard)
     (:name "FUNCTION")
     (:value nil)
     (:reactive nil))
    (:input
     (:type :standard)
     (:name "LIST")
     (:value nil)
     (:reactive nil)))
   (:outputs (:output (:name "out") (:reactive nil)))
   (:id 1))
  (:box
   (:type :function)
   (:reference list)
   (:group-id nil)
   (:name "list")
   (:x 1046)
   (:y 180)
   (:w 54)
   (:h 29)
   (:color nil)
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align nil)
   (:icon :left)
   (:lock nil)
   (:lambda :lambda)
   (:inputs
    (:input
     (:type :optional)
     (:name "x")
     (:value nil)
     (:reactive nil)))
   (:outputs (:output (:name "out") (:reactive nil)))
   (:id 2))
  (:box
   (:type :value)
   (:reference fixnum)
   (:group-id nil)
   (:name "aux 6")
   (:x 1128)
   (:y 101)
   (:w 41)
   (:h 30)
   (:color
    (:color-or-nil (:color (:color 1.0 1.0 1.0 1.0)) (:t-or-nil t)))
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align nil)
   (:lock nil)
   (:inputs)
   (:outputs (:output (:name "value") (:reactive nil)))
   (:value 100)
   (:id 3))
  (:box
   (:type :value)
   (:reference fixnum)
   (:group-id nil)
   (:name "aux 5")
   (:x 1082)
   (:y 102)
   (:w 42)
   (:h 29)
   (:color
    (:color-or-nil (:color (:color 1.0 1.0 1.0 1.0)) (:t-or-nil t)))
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align nil)
   (:lock nil)
   (:inputs)
   (:outputs (:output (:name "value") (:reactive nil)))
   (:value 7200)
   (:id 4))
  (:box
   (:type :value)
   (:reference fixnum)
   (:group-id nil)
   (:name "aux 4")
   (:x 1038)
   (:y 103)
   (:w 39)
   (:h 29)
   (:color
    (:color-or-nil (:color (:color 1.0 1.0 1.0 1.0)) (:t-or-nil t)))
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align nil)
   (:lock nil)
   (:inputs)
   (:outputs (:output (:name "value") (:reactive nil)))
   (:value 6000)
   (:id 5))
  (:box
   (:type :function)
   (:reference arithm-ser)
   (:group-id nil)
   (:name "arithm-ser")
   (:x 1069)
   (:y 133)
   (:w 96)
   (:h 29)
   (:color nil)
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align nil)
   (:icon :left)
   (:lock nil)
   (:lambda nil)
   (:inputs
    (:input
     (:type :standard)
     (:name "BEGIN")
     (:value 6000)
     (:reactive nil))
    (:input
     (:type :standard)
     (:name "END")
     (:value 7200)
     (:reactive nil))
    (:input
     (:type :standard)
     (:name "STEP")
     (:value 100)
     (:reactive nil)))
   (:outputs (:output (:name "out") (:reactive nil)))
   (:id 6))
  (:box
   (:type :value)
   (:reference cons)
   (:group-id nil)
   (:name "list")
   (:x 883)
   (:y 194)
   (:w 155)
   (:h 29)
   (:color
    (:color-or-nil (:color (:color 1.0 1.0 1.0 1.0)) (:t-or-nil t)))
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align nil)
   (:lock nil)
   (:inputs)
   (:outputs (:output (:name "value") (:reactive nil)))
   (:value (:list (:list 1/4) (:list 1/8) (:list 1/16) (:list 3/8)))
   (:id 7))
  (:box
   (:type :value)
   (:reference symbol)
   (:group-id nil)
   (:name "aux 3")
   (:x 796)
   (:y 86)
   (:w 140)
   (:h 30)
   (:color
    (:color-or-nil (:color (:color 1.0 1.0 1.0 1.0)) (:t-or-nil t)))
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align nil)
   (:lock nil)
   (:inputs)
   (:outputs (:output (:name "value") (:reactive nil)))
   (:value :position-for-duration)
   (:id 8))
  (:box
   (:type :value)
   (:reference fixnum)
   (:group-id nil)
   (:name "aux 2")
   (:x 806)
   (:y 125)
   (:w 32)
   (:h 30)
   (:color
    (:color-or-nil (:color (:color 1.0 1.0 1.0 1.0)) (:t-or-nil t)))
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align nil)
   (:lock nil)
   (:inputs)
   (:outputs (:output (:name "value") (:reactive nil)))
   (:value 0)
   (:id 9))
  (:box
   (:type :value)
   (:reference cons)
   (:group-id nil)
   (:name "aux")
   (:x 749)
   (:y 125)
   (:w 37)
   (:h 30)
   (:color
    (:color-or-nil (:color (:color 1.0 1.0 1.0 1.0)) (:t-or-nil t)))
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align nil)
   (:lock nil)
   (:inputs)
   (:outputs (:output (:name "value") (:reactive nil)))
   (:value (:list 0))
   (:id 10))
  (:box
   (:type :abstraction)
   (:reference
    (:patch
     (:name "internal-patch")
     (:doc "")
     (:info
      (:created nil)
      (:modified nil)
      (:by *app-name*)
      (:version 0))
     (:window (:size nil) (:position nil))
     (:grid nil)
     (:lock nil)
     (:boxes
      (:box
       (:type :io)
       (:reference
        (:out (:type omout) (:name "output") (:index 1) (:doc nil)))
       (:group-id nil)
       (:name "output")
       (:x 171)
       (:y 200)
       (:w 58)
       (:h 42)
       (:color
        (:color-or-nil
         (:color (:color 1.0 1.0 1.0 0.0))
         (:t-or-nil t)))
       (:border 0)
       (:roundness 0)
       (:text-font nil)
       (:align :center)
       (:icon :top)
       (:inputs
        (:input
         (:type :standard)
         (:name "out-value")
         (:value nil)
         (:reactive nil)))
       (:outputs)
       (:id 0))
      (:box
       (:type :io)
       (:reference
        (:in (:type omin) (:index 1) (:name "input") (:doc "")))
       (:group-id nil)
       (:name "input")
       (:x 119)
       (:y 28)
       (:w 50)
       (:h 42)
       (:color
        (:color-or-nil
         (:color (:color 1.0 1.0 1.0 0.0))
         (:t-or-nil t)))
       (:border 0)
       (:roundness 0)
       (:text-font nil)
       (:align :center)
       (:icon :top)
       (:inputs)
       (:outputs (:output (:name "out") (:reactive nil)))
       (:id 1))
      (:box
       (:type :value)
       (:reference ratio)
       (:group-id nil)
       (:name "aux")
       (:x 221)
       (:y 51)
       (:w 39)
       (:h 30)
       (:color
        (:color-or-nil
         (:color (:color 1.0 1.0 1.0 1.0))
         (:t-or-nil t)))
       (:border nil)
       (:roundness nil)
       (:text-font nil)
       (:align nil)
       (:lock nil)
       (:inputs)
       (:outputs (:output (:name "value") (:reactive nil)))
       (:value 3/8)
       (:id 2))
      (:box
       (:type :function)
       (:reference om=)
       (:group-id nil)
       (:name "om=")
       (:x 185)
       (:y 126)
       (:w 64)
       (:h 29)
       (:color nil)
       (:border nil)
       (:roundness nil)
       (:text-font nil)
       (:align nil)
       (:icon :left)
       (:lock nil)
       (:lambda nil)
       (:inputs
        (:input
         (:type :standard)
         (:name "NUM1")
         (:value 0)
         (:reactive nil))
        (:input
         (:type :standard)
         (:name "NUM2")
         (:value 0)
         (:reactive nil)))
       (:outputs (:output (:name "out") (:reactive nil)))
       (:id 3)))
     (:connections
      (:connection (:from (:box 1 :out 0)) (:to (:box 3 :in 0)))
      (:connection (:from (:box 2 :out 0)) (:to (:box 3 :in 1)))
      (:connection (:from (:box 3 :out 0)) (:to (:box 0 :in 0))))))
   (:group-id nil)
   (:name "internal-patch")
   (:x 657)
   (:y 80)
   (:w 115)
   (:h 48)
   (:color nil)
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align :center)
   (:display :hidden)
   (:lock nil)
   (:lambda :lambda)
   (:pre-delay 0)
   (:inputs
    (:input
     (:type :standard)
     (:name "input")
     (:value nil)
     (:reactive nil)))
   (:outputs (:output (:name "output") (:reactive nil)))
   (:id 11))
  (:box
   (:library "Cluster-Engine")
   (:type :function)
   (:reference (:symbol "RINDEX-RHYTHMS-ONE-VOICE" "CLUSTER-ENGINE"))
   (:group-id nil)
   (:name "rindex-rhythms-one-voice")
   (:x 721)
   (:y 163)
   (:w 182)
   (:h 29)
   (:color nil)
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align nil)
   (:icon :left)
   (:lock nil)
   (:lambda nil)
   (:inputs
    (:input
     (:type :standard)
     (:name "RULE")
     (:value nil)
     (:reactive nil))
    (:input
     (:type :standard)
     (:name "POSITIONS")
     (:value (:list 0))
     (:reactive nil))
    (:input
     (:type :standard)
     (:name "VOICES")
     (:value 0)
     (:reactive nil))
    (:input
     (:type :standard)
     (:name "INPUT-MODE")
     (:value :position-for-duration)
     (:reactive nil)))
   (:outputs (:output (:name "out") (:reactive nil)))
   (:id 12))
  (:box
   (:library "Cluster-Engine")
   (:type :function)
   (:reference (:symbol "CLUSTER-ENGINE" "CLUSTER-ENGINE"))
   (:group-id nil)
   (:name "cluster-engine")
   (:x 887)
   (:y 282)
   (:w 116)
   (:h 29)
   (:color nil)
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align nil)
   (:icon :left)
   (:lock nil)
   (:lambda nil)
   (:inputs
    (:input
     (:type :standard)
     (:name "NO-OF-VARIABLES")
     (:value 12)
     (:reactive nil))
    (:input
     (:type :standard)
     (:name "RND?")
     (:value t)
     (:reactive nil))
    (:input
     (:type :standard)
     (:name "DEBUG?")
     (:value nil)
     (:reactive nil))
    (:input
     (:type :standard)
     (:name "RULES")
     (:value nil)
     (:reactive nil))
    (:input
     (:type :standard)
     (:name "TEMPO")
     (:value 90)
     (:reactive nil))
    (:input
     (:type :standard)
     (:name "OUTPUT")
     (:value :voices)
     (:reactive nil))
    (:input
     (:type :standard)
     (:name "METRIC-DOMAIN")
     (:value (:list (:list 4 4)))
     (:reactive nil))
    (:input
     (:type :standard)
     (:name "RHYTHMDOMAIN0")
     (:value (:list (:list 1/4)))
     (:reactive nil))
    (:input
     (:type :standard)
     (:name "PITCHDOMAIN0")
     (:value nil)
     (:reactive nil)))
   (:outputs (:output (:name "out") (:reactive nil)))
   (:id 13))
  (:comment
   (:x 26)
   (:y 34)
   (:w 579)
   (:h 398)
   (:fgcolor (:color 0 0 0 1.0))
   (:bgcolor nil)
   (:border 0)
   (:roundness nil)
   (:text-font (:font (:face "Verdana") (:size 12) (:style :plain)))
   (:align nil)
   (:text
    "RULES ONE ENGINE 2

Index rules:

This example uses three engines to find a solution: 

1. One engine searches for durations for the sequence. There are four durations in the domain to pick from.

2. One engine searches for pitches for the sequence. Note that the domain is defined with the help of the arithm-ser function (which outputs '(6000 6100 6200 6300 6400 6500 6600 6700 
6800 6900 7000 7100 7200) ), and a mapcar fuction that puts each number in a list (i.e. '((6000) (6100) (6200) (6300) (6400) (6500) (6600) (6700) (6800) (6900) (7000) (7100) (7200)) ). Alernatively it is possible to use the second input and output of a chord-seq object.

3. The metric domain only contains one time signature. Because of that, this engine will not have to search for time signatures. An engine that does not search cannot backtrack, and will therefore not slow down the search process.

The rindex-rhythms-one-voice defines an index rule for rhythms in the first voice (voices are numbered from 0). The box is set to access the first duration (durations are numbered from 0): note that the menu is set to :position-for-duration.

The rule restriction for the first duration can be found inside the internal patch: The rule constrain the first duration in the voice to always be a dotted quarter note (3/8). The internal patch has to be set to the Lambda mode (select the abstraction and press \"l\").")
   (:id 14)))
 (:connections
  (:connection (:from (:box 1 :out 0)) (:to (:box 13 :in 8)))
  (:connection (:from (:box 2 :out 0)) (:to (:box 1 :in 0)))
  (:connection (:from (:box 3 :out 0)) (:to (:box 6 :in 2)))
  (:connection (:from (:box 4 :out 0)) (:to (:box 6 :in 1)))
  (:connection (:from (:box 5 :out 0)) (:to (:box 6 :in 0)))
  (:connection (:from (:box 6 :out 0)) (:to (:box 1 :in 1)))
  (:connection (:from (:box 7 :out 0)) (:to (:box 13 :in 7)))
  (:connection (:from (:box 8 :out 0)) (:to (:box 12 :in 3)))
  (:connection (:from (:box 9 :out 0)) (:to (:box 12 :in 2)))
  (:connection (:from (:box 10 :out 0)) (:to (:box 12 :in 1)))
  (:connection (:from (:box 11 :out 0)) (:to (:box 12 :in 0)))
  (:connection (:from (:box 12 :out 0)) (:to (:box 13 :in 3)))
  (:connection (:from (:box 13 :out 0)) (:to (:box 0 :in 1)))))