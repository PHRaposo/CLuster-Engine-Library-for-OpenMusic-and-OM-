; OM File Header - Saved 2021/07/23 2:01:56
; (6.18 :patc (om-make-point 387 110) (om-make-point 14 28) (om-make-point 1320 558) "" 183 0 "2021/07/06 15:03:14" "2021/07/23 2:01:56")
; End File Header
(in-package :om)(load-lib-for (quote ("Cluster-Engine")))(setf *om-current-persistent* (om-load-patch1 "005a-rules-one-engine1" (quote ((let ((box (om-load-boxcall (quote genfun) "RPITCHES-ONE-VOICE" (quote cluster-engine::rpitches-one-voice) (quote ((om-load-inputfun (quote input-funbox) "rule" "RULE" nil) (om-load-inputfun (quote input-funbox) "voice-number" "VOICES" 0) (om-load-inputfunmenu1 (quote input-funmenu) "input-mode" "INPUT-MODE" (quote :pitches) (list (list "pitches" (quote :pitches)) (list "pitch/nth" (quote :pitch/nth)) (list "motifs" (quote :motifs)) (list "motif/nth" (quote :motif/nth)) (list "motif/index" (quote :motif/index)) (list "all-pitches" (quote :all-pitches)))))) (om-make-point 894 41) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "RRHYTHMS-ONE-VOICE-AT-TIMEPOINTS" (quote cluster-engine::rrhythms-one-voice-at-timepoints) (quote ((om-load-inputfun (quote input-funbox) "rule" "RULE" nil) (om-load-inputfun (quote input-funbox) "voice-number" "VOICE" 0) (om-load-inputfun (quote input-funbox) "list-of-timepoints" "TIMEPOINTS" (list 0)) (om-load-inputfunmenu1 (quote input-funmenu) "input-mode" "INPUT-MODE" (quote :motifs-start) (list (list "motifs-start" (quote :motifs-start)) (list "motifs-end" (quote :motifs-end)) (list "dur-start" (quote :dur-start)))))) (om-make-point 740 300) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "RONLY-M-MOTIFS" (quote cluster-engine::ronly-m-motifs) (quote ((om-load-inputfun (quote input-funbox) "voice-number" "VOICES" 0))) (om-make-point 1008 300) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "RINDEX-TIME-SIGNATURES" (quote cluster-engine::rindex-time-signatures) (quote ((om-load-inputfun (quote input-funbox) "rule" "RULE" nil) (om-load-inputfun (quote input-funbox) "list-of-positions" "INDEXES" (list 0)))) (om-make-point 1080 160) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "RTIME-SIGNATURES" (quote cluster-engine::rtime-signatures) (quote ((om-load-inputfun (quote input-funbox) "rule" "RULE" nil) (om-load-inputfunmenu1 (quote input-funmenu) "input-mode" "INPUT-MODE" (quote :timesigns) (list (list "timesigns" (quote :timesigns)) (list "all-timesigns" (quote :all-timesigns)))))) (om-make-point 1100 40) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "RINDEX-PITCHES-ONE-VOICE" (quote cluster-engine::rindex-pitches-one-voice) (quote ((om-load-inputfun (quote input-funbox) "rule" "RULE" nil) (om-load-inputfun (quote input-funbox) "list-of-positions" "POSITIONS" (list 0)) (om-load-inputfun (quote input-funbox) "voice-number" "VOICES" 0) (om-load-inputfunmenu1 (quote input-funmenu) "input-mode" "INPUT-MODE" (quote :index-for-cell) (list (list "index-for-cell" (quote :index-for-cell)) (list "position-for-pitches" (quote :position-for-pitches)))))) (om-make-point 880 160) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "RINDEX-RHYTHMS-ONE-VOICE" (quote cluster-engine::rindex-rhythms-one-voice) (quote ((om-load-inputfun (quote input-funbox) "rule" "RULE" nil) (om-load-inputfun (quote input-funbox) "list-of-positions" "POSITIONS" (list 0)) (om-load-inputfun (quote input-funbox) "voice-number" "VOICES" 0) (om-load-inputfunmenu1 (quote input-funmenu) "input-mode" "INPUT-MODE" (quote :index-for-cell) (list (list "index-for-cell" (quote :index-for-cell)) (list "position-for-duration" (quote :position-for-duration)))))) (om-make-point 660 160) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "RRHYTHMS-ONE-VOICE" (quote cluster-engine::rrhythms-one-voice) (quote ((om-load-inputfun (quote input-funbox) "rule" "RULE" nil) (om-load-inputfun (quote input-funbox) "voice-number" "VOICES" 0) (om-load-inputfunmenu1 (quote input-funmenu) "input-mode" "INPUT-MODE" (quote :durations) (list (list "durations" (quote :durations)) (list "dur/time" (quote :dur/time)) (list "motifs" (quote :motifs)) (list "motif/time" (quote :motif/time)) (list "all-durations" (quote :all-durations)))))) (om-make-point 680 40) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 607 463) (quote "RULES ONE ENGINE 1$$A rule that only constrain variables in one engine will restrict how durations in one voice relate to other rhythms in the same voice, or how pitches in one voice relate to other pitches in the same voice. A rule might alternatelty constrain how the metric structure in a measure relates to the $metric structure in other measures.$$Rules that constrain one engine might either be index rules or wild card rules: $$An index rule can constrain a variable at a certain position in the sequence (for example the third variable in a rhythm engine, that might contain a rhythm motif with several duratins, or a single duration). It can also constrain a duration or pitch at a certain position in the sequence (for example the third duration, regardless of it is part of a rhythm motif or not). Durations may also be restricted depending on their time position in the sequence.$$A wild card rule will step through the sequence and constrain all durations or pitches with the same restriction. $$Rules that only constrain variables in one engine are the easiest for the system to find a solution for (if one of these rules fail, it will only have to backtrack and correct the variables in the engine where the fail was discovered). Note however that in combination with other rules, these rules can increase the complexity of a given problem.") "" (om-make-point 14 33) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote nil) nil 6.18))
